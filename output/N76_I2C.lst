                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module N76_I2C
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _timeOut
                                     12 	.globl __delay_us
                                     13 	.globl _eiph1
                                     14 	.globl _eip1
                                     15 	.globl _pmd
                                     16 	.globl _pmen
                                     17 	.globl _pdtcnt
                                     18 	.globl _pdten
                                     19 	.globl _scon_1
                                     20 	.globl _eiph
                                     21 	.globl _aindids
                                     22 	.globl _spdr
                                     23 	.globl _spsr
                                     24 	.globl _spcr2
                                     25 	.globl _spcr
                                     26 	.globl _capcon4
                                     27 	.globl _capcon3
                                     28 	.globl _b
                                     29 	.globl _eip
                                     30 	.globl _c2h
                                     31 	.globl _c2l
                                     32 	.globl _pif
                                     33 	.globl _pipen
                                     34 	.globl _pinen
                                     35 	.globl _picon
                                     36 	.globl _adccon0
                                     37 	.globl _c1h
                                     38 	.globl _c1l
                                     39 	.globl _c0h
                                     40 	.globl _c0l
                                     41 	.globl _adcdly
                                     42 	.globl _adccon2
                                     43 	.globl _adccon1
                                     44 	.globl _acc
                                     45 	.globl _pwmcon1
                                     46 	.globl _piocon0
                                     47 	.globl _pwm3l
                                     48 	.globl _pwm2l
                                     49 	.globl _pwm1l
                                     50 	.globl _pwm0l
                                     51 	.globl _pwmpl
                                     52 	.globl _pwmcon0
                                     53 	.globl _fbd
                                     54 	.globl _pnp
                                     55 	.globl _pwm3h
                                     56 	.globl _pwm2h
                                     57 	.globl _pwm1h
                                     58 	.globl _pwm0h
                                     59 	.globl _pwmph
                                     60 	.globl _psw
                                     61 	.globl _adcmph
                                     62 	.globl _adcmpl
                                     63 	.globl _pwm5l
                                     64 	.globl _th2
                                     65 	.globl _pwm4l
                                     66 	.globl _tl2
                                     67 	.globl _rcmp2h
                                     68 	.globl _rcmp2l
                                     69 	.globl _t2mod
                                     70 	.globl _t2con
                                     71 	.globl _ta
                                     72 	.globl _piocon1
                                     73 	.globl _rh3
                                     74 	.globl _pwm5h
                                     75 	.globl _rl3
                                     76 	.globl _pwm4h
                                     77 	.globl _t3con
                                     78 	.globl _adcrh
                                     79 	.globl _adcrl
                                     80 	.globl _i2addr
                                     81 	.globl _i2con
                                     82 	.globl _i2toc
                                     83 	.globl _i2clk
                                     84 	.globl _i2stat
                                     85 	.globl _i2dat
                                     86 	.globl _saddr_1
                                     87 	.globl _saden_1
                                     88 	.globl _saden
                                     89 	.globl _ip
                                     90 	.globl _pwmintc
                                     91 	.globl _iph
                                     92 	.globl _p2s
                                     93 	.globl _p1sr
                                     94 	.globl _p1m2
                                     95 	.globl _p1s
                                     96 	.globl _p1m1
                                     97 	.globl _p0sr
                                     98 	.globl _p0m2
                                     99 	.globl _p0s
                                    100 	.globl _p0m1
                                    101 	.globl _p3
                                    102 	.globl _iapcn
                                    103 	.globl _iapfd
                                    104 	.globl _p3sr
                                    105 	.globl _p3m2
                                    106 	.globl _p3s
                                    107 	.globl _p3m1
                                    108 	.globl _bodcon1
                                    109 	.globl _wdcon
                                    110 	.globl _saddr
                                    111 	.globl _ie
                                    112 	.globl _iapah
                                    113 	.globl _iapal
                                    114 	.globl _iapuen
                                    115 	.globl _iaptrg
                                    116 	.globl _bodcon0
                                    117 	.globl _auxr1
                                    118 	.globl _p2
                                    119 	.globl _chpcon
                                    120 	.globl _eie1
                                    121 	.globl _eie
                                    122 	.globl _sbuf_1
                                    123 	.globl _sbuf
                                    124 	.globl _scon
                                    125 	.globl _cken
                                    126 	.globl _ckswt
                                    127 	.globl _ckdiv
                                    128 	.globl _capcon2
                                    129 	.globl _capcon1
                                    130 	.globl _capcon0
                                    131 	.globl _sfrs
                                    132 	.globl _p1
                                    133 	.globl _wkcon
                                    134 	.globl _ckcon
                                    135 	.globl _th1
                                    136 	.globl _th0
                                    137 	.globl _tl1
                                    138 	.globl _tl0
                                    139 	.globl _tmod
                                    140 	.globl _tcon
                                    141 	.globl _pcon
                                    142 	.globl _rwk
                                    143 	.globl _rctrim1
                                    144 	.globl _rctrim0
                                    145 	.globl _dph
                                    146 	.globl _dpl
                                    147 	.globl _sp
                                    148 	.globl _p0
                                    149 	.globl _t
                                    150 	.globl _txBuffer
                                    151 	.globl _txBufferLength
                                    152 	.globl _txBufferIndex
                                    153 	.globl _rxBuffer
                                    154 	.globl _rxBufferLength
                                    155 	.globl _rxBufferIndex
                                    156 	.globl _I2C_requestFrom_PARM_2
                                    157 	.globl _I2C_writeBuffer_PARM_2
                                    158 	.globl _I2C_begin
                                    159 	.globl _I2C_beginTransmission
                                    160 	.globl _I2C_write
                                    161 	.globl _I2C_writeBuffer
                                    162 	.globl _I2C_endTransmission
                                    163 	.globl _I2C_requestFrom
                                    164 	.globl _I2C_read
                                    165 	.globl _I2C_available
                                    166 ;--------------------------------------------------------
                                    167 ; special function registers
                                    168 ;--------------------------------------------------------
                                    169 	.area RSEG    (ABS,DATA)
      000000                        170 	.org 0x0000
                           000080   171 _p0	=	0x0080
                           000081   172 _sp	=	0x0081
                           000082   173 _dpl	=	0x0082
                           000083   174 _dph	=	0x0083
                           000084   175 _rctrim0	=	0x0084
                           000085   176 _rctrim1	=	0x0085
                           000086   177 _rwk	=	0x0086
                           000087   178 _pcon	=	0x0087
                           000088   179 _tcon	=	0x0088
                           000089   180 _tmod	=	0x0089
                           00008A   181 _tl0	=	0x008a
                           00008B   182 _tl1	=	0x008b
                           00008C   183 _th0	=	0x008c
                           00008D   184 _th1	=	0x008d
                           00008E   185 _ckcon	=	0x008e
                           00008F   186 _wkcon	=	0x008f
                           000090   187 _p1	=	0x0090
                           000091   188 _sfrs	=	0x0091
                           000092   189 _capcon0	=	0x0092
                           000093   190 _capcon1	=	0x0093
                           000094   191 _capcon2	=	0x0094
                           000095   192 _ckdiv	=	0x0095
                           000096   193 _ckswt	=	0x0096
                           000097   194 _cken	=	0x0097
                           000098   195 _scon	=	0x0098
                           000099   196 _sbuf	=	0x0099
                           00009A   197 _sbuf_1	=	0x009a
                           00009B   198 _eie	=	0x009b
                           00009C   199 _eie1	=	0x009c
                           00009F   200 _chpcon	=	0x009f
                           0000A0   201 _p2	=	0x00a0
                           0000A2   202 _auxr1	=	0x00a2
                           0000A3   203 _bodcon0	=	0x00a3
                           0000A4   204 _iaptrg	=	0x00a4
                           0000A5   205 _iapuen	=	0x00a5
                           0000A6   206 _iapal	=	0x00a6
                           0000A7   207 _iapah	=	0x00a7
                           0000A8   208 _ie	=	0x00a8
                           0000A9   209 _saddr	=	0x00a9
                           0000AA   210 _wdcon	=	0x00aa
                           0000AB   211 _bodcon1	=	0x00ab
                           0000AC   212 _p3m1	=	0x00ac
                           0000AC   213 _p3s	=	0x00ac
                           0000AD   214 _p3m2	=	0x00ad
                           0000AD   215 _p3sr	=	0x00ad
                           0000AE   216 _iapfd	=	0x00ae
                           0000AF   217 _iapcn	=	0x00af
                           0000B0   218 _p3	=	0x00b0
                           0000B1   219 _p0m1	=	0x00b1
                           0000B1   220 _p0s	=	0x00b1
                           0000B2   221 _p0m2	=	0x00b2
                           0000B2   222 _p0sr	=	0x00b2
                           0000B3   223 _p1m1	=	0x00b3
                           0000B3   224 _p1s	=	0x00b3
                           0000B4   225 _p1m2	=	0x00b4
                           0000B4   226 _p1sr	=	0x00b4
                           0000B5   227 _p2s	=	0x00b5
                           0000B7   228 _iph	=	0x00b7
                           0000B7   229 _pwmintc	=	0x00b7
                           0000B8   230 _ip	=	0x00b8
                           0000B9   231 _saden	=	0x00b9
                           0000BA   232 _saden_1	=	0x00ba
                           0000BB   233 _saddr_1	=	0x00bb
                           0000BC   234 _i2dat	=	0x00bc
                           0000BD   235 _i2stat	=	0x00bd
                           0000BE   236 _i2clk	=	0x00be
                           0000BF   237 _i2toc	=	0x00bf
                           0000C0   238 _i2con	=	0x00c0
                           0000C1   239 _i2addr	=	0x00c1
                           0000C2   240 _adcrl	=	0x00c2
                           0000C3   241 _adcrh	=	0x00c3
                           0000C4   242 _t3con	=	0x00c4
                           0000C4   243 _pwm4h	=	0x00c4
                           0000C5   244 _rl3	=	0x00c5
                           0000C5   245 _pwm5h	=	0x00c5
                           0000C6   246 _rh3	=	0x00c6
                           0000C6   247 _piocon1	=	0x00c6
                           0000C7   248 _ta	=	0x00c7
                           0000C8   249 _t2con	=	0x00c8
                           0000C9   250 _t2mod	=	0x00c9
                           0000CA   251 _rcmp2l	=	0x00ca
                           0000CB   252 _rcmp2h	=	0x00cb
                           0000CC   253 _tl2	=	0x00cc
                           0000CC   254 _pwm4l	=	0x00cc
                           0000CD   255 _th2	=	0x00cd
                           0000CD   256 _pwm5l	=	0x00cd
                           0000CE   257 _adcmpl	=	0x00ce
                           0000CF   258 _adcmph	=	0x00cf
                           0000D0   259 _psw	=	0x00d0
                           0000D1   260 _pwmph	=	0x00d1
                           0000D2   261 _pwm0h	=	0x00d2
                           0000D3   262 _pwm1h	=	0x00d3
                           0000D4   263 _pwm2h	=	0x00d4
                           0000D5   264 _pwm3h	=	0x00d5
                           0000D6   265 _pnp	=	0x00d6
                           0000D7   266 _fbd	=	0x00d7
                           0000D8   267 _pwmcon0	=	0x00d8
                           0000D9   268 _pwmpl	=	0x00d9
                           0000DA   269 _pwm0l	=	0x00da
                           0000DB   270 _pwm1l	=	0x00db
                           0000DC   271 _pwm2l	=	0x00dc
                           0000DD   272 _pwm3l	=	0x00dd
                           0000DE   273 _piocon0	=	0x00de
                           0000DF   274 _pwmcon1	=	0x00df
                           0000E0   275 _acc	=	0x00e0
                           0000E1   276 _adccon1	=	0x00e1
                           0000E2   277 _adccon2	=	0x00e2
                           0000E3   278 _adcdly	=	0x00e3
                           0000E4   279 _c0l	=	0x00e4
                           0000E5   280 _c0h	=	0x00e5
                           0000E6   281 _c1l	=	0x00e6
                           0000E7   282 _c1h	=	0x00e7
                           0000E8   283 _adccon0	=	0x00e8
                           0000E9   284 _picon	=	0x00e9
                           0000EA   285 _pinen	=	0x00ea
                           0000EB   286 _pipen	=	0x00eb
                           0000EC   287 _pif	=	0x00ec
                           0000ED   288 _c2l	=	0x00ed
                           0000EE   289 _c2h	=	0x00ee
                           0000EF   290 _eip	=	0x00ef
                           0000F0   291 _b	=	0x00f0
                           0000F1   292 _capcon3	=	0x00f1
                           0000F2   293 _capcon4	=	0x00f2
                           0000F3   294 _spcr	=	0x00f3
                           0000F3   295 _spcr2	=	0x00f3
                           0000F4   296 _spsr	=	0x00f4
                           0000F5   297 _spdr	=	0x00f5
                           0000F6   298 _aindids	=	0x00f6
                           0000F7   299 _eiph	=	0x00f7
                           0000F8   300 _scon_1	=	0x00f8
                           0000F9   301 _pdten	=	0x00f9
                           0000FA   302 _pdtcnt	=	0x00fa
                           0000FB   303 _pmen	=	0x00fb
                           0000FC   304 _pmd	=	0x00fc
                           0000FE   305 _eip1	=	0x00fe
                           0000FF   306 _eiph1	=	0x00ff
                                    307 ;--------------------------------------------------------
                                    308 ; special function bits
                                    309 ;--------------------------------------------------------
                                    310 	.area RSEG    (ABS,DATA)
      000000                        311 	.org 0x0000
                                    312 ;--------------------------------------------------------
                                    313 ; overlayable register banks
                                    314 ;--------------------------------------------------------
                                    315 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        316 	.ds 8
                                    317 ;--------------------------------------------------------
                                    318 ; internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area DSEG    (DATA)
      000000                        321 _I2C_writeBuffer_PARM_2:
      000000                        322 	.ds 1
      000001                        323 _I2C_requestFrom_PARM_2:
      000001                        324 	.ds 1
                                    325 ;--------------------------------------------------------
                                    326 ; overlayable items in internal ram
                                    327 ;--------------------------------------------------------
                                    328 	.area	OSEG    (OVR,DATA)
                                    329 	.area	OSEG    (OVR,DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; indirectly addressable internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area ISEG    (DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; absolute internal ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area IABS    (ABS,DATA)
                                    338 	.area IABS    (ABS,DATA)
                                    339 ;--------------------------------------------------------
                                    340 ; bit data
                                    341 ;--------------------------------------------------------
                                    342 	.area BSEG    (BIT)
                                    343 ;--------------------------------------------------------
                                    344 ; paged external ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area PSEG    (PAG,XDATA)
                                    347 ;--------------------------------------------------------
                                    348 ; uninitialized external ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area XSEG    (XDATA)
      000000                        351 _rxBufferIndex::
      000000                        352 	.ds 1
      000001                        353 _rxBufferLength::
      000001                        354 	.ds 1
      000002                        355 _rxBuffer::
      000002                        356 	.ds 32
      000022                        357 _txBufferIndex::
      000022                        358 	.ds 1
      000023                        359 _txBufferLength::
      000023                        360 	.ds 1
      000024                        361 _txBuffer::
      000024                        362 	.ds 32
                                    363 ;--------------------------------------------------------
                                    364 ; absolute external ram data
                                    365 ;--------------------------------------------------------
                                    366 	.area XABS    (ABS,XDATA)
                                    367 ;--------------------------------------------------------
                                    368 ; initialized external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XISEG   (XDATA)
      000000                        371 _t::
      000000                        372 	.ds 1
                                    373 	.area HOME    (CODE)
                                    374 	.area GSINIT0 (CODE)
                                    375 	.area GSINIT1 (CODE)
                                    376 	.area GSINIT2 (CODE)
                                    377 	.area GSINIT3 (CODE)
                                    378 	.area GSINIT4 (CODE)
                                    379 	.area GSINIT5 (CODE)
                                    380 	.area GSINIT  (CODE)
                                    381 	.area GSFINAL (CODE)
                                    382 	.area CSEG    (CODE)
                                    383 ;--------------------------------------------------------
                                    384 ; global & static initialisations
                                    385 ;--------------------------------------------------------
                                    386 	.area HOME    (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 	.area GSFINAL (CODE)
                                    389 	.area GSINIT  (CODE)
                                    390 ;--------------------------------------------------------
                                    391 ; Home
                                    392 ;--------------------------------------------------------
                                    393 	.area HOME    (CODE)
                                    394 	.area HOME    (CODE)
                                    395 ;--------------------------------------------------------
                                    396 ; code
                                    397 ;--------------------------------------------------------
                                    398 	.area CSEG    (CODE)
                                    399 ;------------------------------------------------------------
                                    400 ;Allocation info for local variables in function 'timeOut'
                                    401 ;------------------------------------------------------------
                                    402 ;	./src/N76_I2C.c:20: uint8_x timeOut(void)
                                    403 ;	-----------------------------------------
                                    404 ;	 function timeOut
                                    405 ;	-----------------------------------------
      000000                        406 _timeOut:
                           000007   407 	ar7 = 0x07
                           000006   408 	ar6 = 0x06
                           000005   409 	ar5 = 0x05
                           000004   410 	ar4 = 0x04
                           000003   411 	ar3 = 0x03
                           000002   412 	ar2 = 0x02
                           000001   413 	ar1 = 0x01
                           000000   414 	ar0 = 0x00
                                    415 ;	./src/N76_I2C.c:22: _delay_us(100);
      000000 90 00 64         [24]  416 	mov	dptr,#0x0064
      000003 E4               [12]  417 	clr	a
      000004 F5 F0            [12]  418 	mov	b,a
      000006 12r00r00         [24]  419 	lcall	__delay_us
                                    420 ;	./src/N76_I2C.c:23: if (++t > 10)
      000009 90r00r00         [24]  421 	mov	dptr,#_t
      00000C E0               [24]  422 	movx	a,@dptr
      00000D 24 01            [12]  423 	add	a, #0x01
      00000F F0               [24]  424 	movx	@dptr,a
      000010 E0               [24]  425 	movx	a,@dptr
      000011 24 F5            [12]  426 	add	a,#0xff - 0x0a
      000013 50 04            [24]  427 	jnc	00102$
                                    428 ;	./src/N76_I2C.c:24: return 1;
      000015 75 82 01         [24]  429 	mov	dpl, #0x01
      000018 22               [24]  430 	ret
      000019                        431 00102$:
                                    432 ;	./src/N76_I2C.c:25: return 0;
      000019 75 82 00         [24]  433 	mov	dpl, #0x00
                                    434 ;	./src/N76_I2C.c:26: }
      00001C 22               [24]  435 	ret
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'I2C_begin'
                                    438 ;------------------------------------------------------------
                                    439 ;	./src/N76_I2C.c:28: void I2C_begin(void)
                                    440 ;	-----------------------------------------
                                    441 ;	 function I2C_begin
                                    442 ;	-----------------------------------------
      00001D                        443 _I2C_begin:
                                    444 ;	./src/N76_I2C.c:30: P13_OpenDrain_Mode;
      00001D 43 B3 08         [24]  445 	orl	_p1m1,#0x08
      000020 43 B4 08         [24]  446 	orl	_p1m2,#0x08
                                    447 ;	./src/N76_I2C.c:31: P14_OpenDrain_Mode;
      000023 43 B3 10         [24]  448 	orl	_p1m1,#0x10
      000026 43 B4 10         [24]  449 	orl	_p1m2,#0x10
                                    450 ;	./src/N76_I2C.c:34: I2CLK = I2C_CLOCK; // I2C clock = Fsys/(4*(I2CLK+1))
      000029 75 BE 27         [24]  451 	mov	_i2clk,#0x27
                                    452 ;	./src/N76_I2C.c:37: set_I2CEN;
      00002C 43 C0 40         [24]  453 	orl	_i2con,#0x40
                                    454 ;	./src/N76_I2C.c:38: }
      00002F 22               [24]  455 	ret
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'I2C_beginTransmission'
                                    458 ;------------------------------------------------------------
                                    459 ;addr                      Allocated to registers r7 
                                    460 ;------------------------------------------------------------
                                    461 ;	./src/N76_I2C.c:40: uint8_t I2C_beginTransmission(uint8_t addr)
                                    462 ;	-----------------------------------------
                                    463 ;	 function I2C_beginTransmission
                                    464 ;	-----------------------------------------
      000030                        465 _I2C_beginTransmission:
      000030 AF 82            [24]  466 	mov	r7, dpl
                                    467 ;	./src/N76_I2C.c:42: txBufferIndex = 0;
      000032 90r00r22         [24]  468 	mov	dptr,#_txBufferIndex
      000035 E4               [12]  469 	clr	a
      000036 F0               [24]  470 	movx	@dptr,a
                                    471 ;	./src/N76_I2C.c:43: txBufferLength = 0;
      000037 90r00r23         [24]  472 	mov	dptr,#_txBufferLength
      00003A F0               [24]  473 	movx	@dptr,a
                                    474 ;	./src/N76_I2C.c:52: set_STA;
      00003B 43 C0 20         [24]  475 	orl	_i2con,#0x20
                                    476 ;	./src/N76_I2C.c:53: clr_SI;
      00003E 53 C0 F7         [24]  477 	anl	_i2con,#0xf7
                                    478 ;	./src/N76_I2C.c:55: t = 0;
      000041 90r00r00         [24]  479 	mov	dptr,#_t
      000044 E4               [12]  480 	clr	a
      000045 F0               [24]  481 	movx	@dptr,a
                                    482 ;	./src/N76_I2C.c:57: while (inbit(I2CON, SI) == 0)
      000046                        483 00103$:
      000046 74 08            [12]  484 	mov	a,#0x08
      000048 55 C0            [12]  485 	anl	a,_i2con
      00004A C4               [12]  486 	swap	a
      00004B 23               [12]  487 	rl	a
      00004C 54 1F            [12]  488 	anl	a,#0x1f
      00004E 70 0F            [24]  489 	jnz	00105$
                                    490 ;	./src/N76_I2C.c:58: if (timeOut())
      000050 C0 07            [24]  491 	push	ar7
      000052 12r00r00         [24]  492 	lcall	_timeOut
      000055 E5 82            [12]  493 	mov	a, dpl
      000057 D0 07            [24]  494 	pop	ar7
      000059 60 EB            [24]  495 	jz	00103$
                                    496 ;	./src/N76_I2C.c:59: return 2;
      00005B 75 82 02         [24]  497 	mov	dpl, #0x02
      00005E 22               [24]  498 	ret
      00005F                        499 00105$:
                                    500 ;	./src/N76_I2C.c:63: I2DAT = (addr << 1) | I2C_WRITE;
      00005F EF               [12]  501 	mov	a,r7
      000060 2F               [12]  502 	add	a,r7
      000061 F5 BC            [12]  503 	mov	_i2dat,a
                                    504 ;	./src/N76_I2C.c:65: t = 0;
      000063 90r00r00         [24]  505 	mov	dptr,#_t
      000066 E4               [12]  506 	clr	a
      000067 F0               [24]  507 	movx	@dptr,a
                                    508 ;	./src/N76_I2C.c:67: clr_STA;
      000068 53 C0 DF         [24]  509 	anl	_i2con,#0xdf
                                    510 ;	./src/N76_I2C.c:68: clr_SI;
      00006B 53 C0 F7         [24]  511 	anl	_i2con,#0xf7
                                    512 ;	./src/N76_I2C.c:69: while (inbit(I2CON, SI) == 0)
      00006E                        513 00108$:
      00006E 74 08            [12]  514 	mov	a,#0x08
      000070 55 C0            [12]  515 	anl	a,_i2con
      000072 C4               [12]  516 	swap	a
      000073 23               [12]  517 	rl	a
      000074 54 1F            [12]  518 	anl	a,#0x1f
      000076 70 0B            [24]  519 	jnz	00110$
                                    520 ;	./src/N76_I2C.c:70: if (timeOut())
      000078 12r00r00         [24]  521 	lcall	_timeOut
      00007B E5 82            [12]  522 	mov	a, dpl
      00007D 60 EF            [24]  523 	jz	00108$
                                    524 ;	./src/N76_I2C.c:71: return 3;
      00007F 75 82 03         [24]  525 	mov	dpl, #0x03
      000082 22               [24]  526 	ret
      000083                        527 00110$:
                                    528 ;	./src/N76_I2C.c:73: return 0;
      000083 75 82 00         [24]  529 	mov	dpl, #0x00
                                    530 ;	./src/N76_I2C.c:74: }
      000086 22               [24]  531 	ret
                                    532 ;------------------------------------------------------------
                                    533 ;Allocation info for local variables in function 'I2C_write'
                                    534 ;------------------------------------------------------------
                                    535 ;data                      Allocated to registers r7 
                                    536 ;------------------------------------------------------------
                                    537 ;	./src/N76_I2C.c:76: void I2C_write(uint8_t data)
                                    538 ;	-----------------------------------------
                                    539 ;	 function I2C_write
                                    540 ;	-----------------------------------------
      000087                        541 _I2C_write:
      000087 AF 82            [24]  542 	mov	r7, dpl
                                    543 ;	./src/N76_I2C.c:78: txBuffer[txBufferIndex++] = data;
      000089 90r00r22         [24]  544 	mov	dptr,#_txBufferIndex
      00008C E0               [24]  545 	movx	a,@dptr
      00008D FE               [12]  546 	mov	r6,a
      00008E 04               [12]  547 	inc	a
      00008F F0               [24]  548 	movx	@dptr,a
      000090 EE               [12]  549 	mov	a,r6
      000091 24r24            [12]  550 	add	a, #_txBuffer
      000093 F5 82            [12]  551 	mov	dpl,a
      000095 E4               [12]  552 	clr	a
      000096 34s00            [12]  553 	addc	a, #(_txBuffer >> 8)
      000098 F5 83            [12]  554 	mov	dph,a
      00009A EF               [12]  555 	mov	a,r7
      00009B F0               [24]  556 	movx	@dptr,a
                                    557 ;	./src/N76_I2C.c:79: txBufferLength = txBufferIndex;
      00009C 90r00r22         [24]  558 	mov	dptr,#_txBufferIndex
      00009F E0               [24]  559 	movx	a,@dptr
      0000A0 90r00r23         [24]  560 	mov	dptr,#_txBufferLength
      0000A3 F0               [24]  561 	movx	@dptr,a
                                    562 ;	./src/N76_I2C.c:80: }
      0000A4 22               [24]  563 	ret
                                    564 ;------------------------------------------------------------
                                    565 ;Allocation info for local variables in function 'I2C_writeBuffer'
                                    566 ;------------------------------------------------------------
                                    567 ;len                       Allocated with name '_I2C_writeBuffer_PARM_2'
                                    568 ;data                      Allocated to registers r5 r6 r7 
                                    569 ;i                         Allocated to registers r4 
                                    570 ;------------------------------------------------------------
                                    571 ;	./src/N76_I2C.c:82: void I2C_writeBuffer(uint8_t *data, uint8_t len)
                                    572 ;	-----------------------------------------
                                    573 ;	 function I2C_writeBuffer
                                    574 ;	-----------------------------------------
      0000A5                        575 _I2C_writeBuffer:
      0000A5 AD 82            [24]  576 	mov	r5, dpl
      0000A7 AE 83            [24]  577 	mov	r6, dph
      0000A9 AF F0            [24]  578 	mov	r7, b
                                    579 ;	./src/N76_I2C.c:84: uint8_t i = 0;
      0000AB 7C 00            [12]  580 	mov	r4,#0x00
      0000AD                        581 00103$:
                                    582 ;	./src/N76_I2C.c:85: for (; i < len; ++i)
      0000AD C3               [12]  583 	clr	c
      0000AE EC               [12]  584 	mov	a,r4
      0000AF 95*00            [12]  585 	subb	a,_I2C_writeBuffer_PARM_2
      0000B1 50 29            [24]  586 	jnc	00105$
                                    587 ;	./src/N76_I2C.c:87: I2C_write(data[i]);
      0000B3 EC               [12]  588 	mov	a,r4
      0000B4 2D               [12]  589 	add	a, r5
      0000B5 F9               [12]  590 	mov	r1,a
      0000B6 E4               [12]  591 	clr	a
      0000B7 3E               [12]  592 	addc	a, r6
      0000B8 FA               [12]  593 	mov	r2,a
      0000B9 8F 03            [24]  594 	mov	ar3,r7
      0000BB 89 82            [24]  595 	mov	dpl,r1
      0000BD 8A 83            [24]  596 	mov	dph,r2
      0000BF 8B F0            [24]  597 	mov	b,r3
      0000C1 12r00r00         [24]  598 	lcall	__gptrget
      0000C4 F5 82            [12]  599 	mov	dpl,a
      0000C6 C0 07            [24]  600 	push	ar7
      0000C8 C0 06            [24]  601 	push	ar6
      0000CA C0 05            [24]  602 	push	ar5
      0000CC C0 04            [24]  603 	push	ar4
      0000CE 12r00r87         [24]  604 	lcall	_I2C_write
      0000D1 D0 04            [24]  605 	pop	ar4
      0000D3 D0 05            [24]  606 	pop	ar5
      0000D5 D0 06            [24]  607 	pop	ar6
      0000D7 D0 07            [24]  608 	pop	ar7
                                    609 ;	./src/N76_I2C.c:85: for (; i < len; ++i)
      0000D9 0C               [12]  610 	inc	r4
      0000DA 80 D1            [24]  611 	sjmp	00103$
      0000DC                        612 00105$:
                                    613 ;	./src/N76_I2C.c:89: }
      0000DC 22               [24]  614 	ret
                                    615 ;------------------------------------------------------------
                                    616 ;Allocation info for local variables in function 'I2C_endTransmission'
                                    617 ;------------------------------------------------------------
                                    618 ;i                         Allocated to registers r7 
                                    619 ;------------------------------------------------------------
                                    620 ;	./src/N76_I2C.c:91: uint8_t I2C_endTransmission(void)
                                    621 ;	-----------------------------------------
                                    622 ;	 function I2C_endTransmission
                                    623 ;	-----------------------------------------
      0000DD                        624 _I2C_endTransmission:
                                    625 ;	./src/N76_I2C.c:95: for (i = 0; i < txBufferLength; ++i)
      0000DD 7F 00            [12]  626 	mov	r7,#0x00
      0000DF                        627 00113$:
      0000DF 90r00r23         [24]  628 	mov	dptr,#_txBufferLength
      0000E2 E0               [24]  629 	movx	a,@dptr
      0000E3 FE               [12]  630 	mov	r6,a
      0000E4 C3               [12]  631 	clr	c
      0000E5 EF               [12]  632 	mov	a,r7
      0000E6 9E               [12]  633 	subb	a,r6
      0000E7 50 34            [24]  634 	jnc	00106$
                                    635 ;	./src/N76_I2C.c:98: I2DAT = txBuffer[i];
      0000E9 EF               [12]  636 	mov	a,r7
      0000EA 24r24            [12]  637 	add	a, #_txBuffer
      0000EC F5 82            [12]  638 	mov	dpl,a
      0000EE E4               [12]  639 	clr	a
      0000EF 34s00            [12]  640 	addc	a, #(_txBuffer >> 8)
      0000F1 F5 83            [12]  641 	mov	dph,a
      0000F3 E0               [24]  642 	movx	a,@dptr
      0000F4 F5 BC            [12]  643 	mov	_i2dat,a
                                    644 ;	./src/N76_I2C.c:101: t = 0;
      0000F6 90r00r00         [24]  645 	mov	dptr,#_t
      0000F9 E4               [12]  646 	clr	a
      0000FA F0               [24]  647 	movx	@dptr,a
                                    648 ;	./src/N76_I2C.c:102: clr_STA;
      0000FB 53 C0 DF         [24]  649 	anl	_i2con,#0xdf
                                    650 ;	./src/N76_I2C.c:103: clr_SI;
      0000FE 53 C0 F7         [24]  651 	anl	_i2con,#0xf7
                                    652 ;	./src/N76_I2C.c:104: while (inbit(I2CON, SI) == 0)
      000101                        653 00103$:
      000101 74 08            [12]  654 	mov	a,#0x08
      000103 55 C0            [12]  655 	anl	a,_i2con
      000105 C4               [12]  656 	swap	a
      000106 23               [12]  657 	rl	a
      000107 54 1F            [12]  658 	anl	a,#0x1f
      000109 70 0F            [24]  659 	jnz	00114$
                                    660 ;	./src/N76_I2C.c:105: if (timeOut())
      00010B C0 07            [24]  661 	push	ar7
      00010D 12r00r00         [24]  662 	lcall	_timeOut
      000110 E5 82            [12]  663 	mov	a, dpl
      000112 D0 07            [24]  664 	pop	ar7
      000114 60 EB            [24]  665 	jz	00103$
                                    666 ;	./src/N76_I2C.c:106: return 1;
      000116 75 82 01         [24]  667 	mov	dpl, #0x01
      000119 22               [24]  668 	ret
      00011A                        669 00114$:
                                    670 ;	./src/N76_I2C.c:95: for (i = 0; i < txBufferLength; ++i)
      00011A 0F               [12]  671 	inc	r7
      00011B 80 C2            [24]  672 	sjmp	00113$
      00011D                        673 00106$:
                                    674 ;	./src/N76_I2C.c:110: set_STO;
      00011D 43 C0 10         [24]  675 	orl	_i2con,#0x10
                                    676 ;	./src/N76_I2C.c:111: set_SI;
      000120 43 C0 08         [24]  677 	orl	_i2con,#0x08
                                    678 ;	./src/N76_I2C.c:114: t = 0;
      000123 90r00r00         [24]  679 	mov	dptr,#_t
      000126 E4               [12]  680 	clr	a
      000127 F0               [24]  681 	movx	@dptr,a
                                    682 ;	./src/N76_I2C.c:115: while (inbit(I2CON, STO) == 1)
      000128                        683 00109$:
      000128 74 10            [12]  684 	mov	a,#0x10
      00012A 55 C0            [12]  685 	anl	a,_i2con
      00012C C4               [12]  686 	swap	a
      00012D 54 0F            [12]  687 	anl	a,#0x0f
      00012F FF               [12]  688 	mov	r7,a
      000130 BF 01 0B         [24]  689 	cjne	r7,#0x01,00111$
                                    690 ;	./src/N76_I2C.c:116: if (timeOut())
      000133 12r00r00         [24]  691 	lcall	_timeOut
      000136 E5 82            [12]  692 	mov	a, dpl
      000138 60 EE            [24]  693 	jz	00109$
                                    694 ;	./src/N76_I2C.c:117: return 3;
      00013A 75 82 03         [24]  695 	mov	dpl, #0x03
      00013D 22               [24]  696 	ret
      00013E                        697 00111$:
                                    698 ;	./src/N76_I2C.c:123: return 0;
      00013E 75 82 00         [24]  699 	mov	dpl, #0x00
                                    700 ;	./src/N76_I2C.c:124: }
      000141 22               [24]  701 	ret
                                    702 ;------------------------------------------------------------
                                    703 ;Allocation info for local variables in function 'I2C_requestFrom'
                                    704 ;------------------------------------------------------------
                                    705 ;len                       Allocated with name '_I2C_requestFrom_PARM_2'
                                    706 ;addr                      Allocated to registers r7 
                                    707 ;i                         Allocated to registers r7 
                                    708 ;------------------------------------------------------------
                                    709 ;	./src/N76_I2C.c:126: uint8_t I2C_requestFrom(uint8_t addr, uint8_t len)
                                    710 ;	-----------------------------------------
                                    711 ;	 function I2C_requestFrom
                                    712 ;	-----------------------------------------
      000142                        713 _I2C_requestFrom:
      000142 AF 82            [24]  714 	mov	r7, dpl
                                    715 ;	./src/N76_I2C.c:129: rxBufferLength = len;
      000144 90r00r01         [24]  716 	mov	dptr,#_rxBufferLength
      000147 E5*01            [12]  717 	mov	a,_I2C_requestFrom_PARM_2
      000149 F0               [24]  718 	movx	@dptr,a
                                    719 ;	./src/N76_I2C.c:130: rxBufferIndex = 0;
      00014A 90r00r00         [24]  720 	mov	dptr,#_rxBufferIndex
      00014D E4               [12]  721 	clr	a
      00014E F0               [24]  722 	movx	@dptr,a
                                    723 ;	./src/N76_I2C.c:139: set_STA;
      00014F 43 C0 20         [24]  724 	orl	_i2con,#0x20
                                    725 ;	./src/N76_I2C.c:140: clr_SI;
      000152 53 C0 F7         [24]  726 	anl	_i2con,#0xf7
                                    727 ;	./src/N76_I2C.c:143: t = 0;
      000155 90r00r00         [24]  728 	mov	dptr,#_t
      000158 E4               [12]  729 	clr	a
      000159 F0               [24]  730 	movx	@dptr,a
                                    731 ;	./src/N76_I2C.c:144: while (inbit(I2CON, SI) == 0)
      00015A                        732 00103$:
      00015A 74 08            [12]  733 	mov	a,#0x08
      00015C 55 C0            [12]  734 	anl	a,_i2con
      00015E C4               [12]  735 	swap	a
      00015F 23               [12]  736 	rl	a
      000160 54 1F            [12]  737 	anl	a,#0x1f
      000162 70 0F            [24]  738 	jnz	00105$
                                    739 ;	./src/N76_I2C.c:145: if (timeOut())
      000164 C0 07            [24]  740 	push	ar7
      000166 12r00r00         [24]  741 	lcall	_timeOut
      000169 E5 82            [12]  742 	mov	a, dpl
      00016B D0 07            [24]  743 	pop	ar7
      00016D 60 EB            [24]  744 	jz	00103$
                                    745 ;	./src/N76_I2C.c:146: return 2;
      00016F 75 82 02         [24]  746 	mov	dpl, #0x02
      000172 22               [24]  747 	ret
      000173                        748 00105$:
                                    749 ;	./src/N76_I2C.c:149: I2DAT = (addr << 1) | I2C_READ;
      000173 EF               [12]  750 	mov	a,r7
      000174 2F               [12]  751 	add	a,r7
      000175 FF               [12]  752 	mov	r7,a
      000176 74 01            [12]  753 	mov	a,#0x01
      000178 4F               [12]  754 	orl	a,r7
      000179 F5 BC            [12]  755 	mov	_i2dat,a
                                    756 ;	./src/N76_I2C.c:150: clr_STA;
      00017B 53 C0 DF         [24]  757 	anl	_i2con,#0xdf
                                    758 ;	./src/N76_I2C.c:151: clr_SI;
      00017E 53 C0 F7         [24]  759 	anl	_i2con,#0xf7
                                    760 ;	./src/N76_I2C.c:154: t = 0;
      000181 90r00r00         [24]  761 	mov	dptr,#_t
      000184 E4               [12]  762 	clr	a
      000185 F0               [24]  763 	movx	@dptr,a
                                    764 ;	./src/N76_I2C.c:155: while (inbit(I2CON, SI) == 0)
      000186                        765 00108$:
      000186 74 08            [12]  766 	mov	a,#0x08
      000188 55 C0            [12]  767 	anl	a,_i2con
      00018A C4               [12]  768 	swap	a
      00018B 23               [12]  769 	rl	a
      00018C 54 1F            [12]  770 	anl	a,#0x1f
      00018E 70 0B            [24]  771 	jnz	00142$
                                    772 ;	./src/N76_I2C.c:156: if (timeOut())
      000190 12r00r00         [24]  773 	lcall	_timeOut
      000193 E5 82            [12]  774 	mov	a, dpl
      000195 60 EF            [24]  775 	jz	00108$
                                    776 ;	./src/N76_I2C.c:157: return 3;
      000197 75 82 03         [24]  777 	mov	dpl, #0x03
      00019A 22               [24]  778 	ret
                                    779 ;	./src/N76_I2C.c:160: for (i = 0; i < rxBufferLength - 1; i++)
      00019B                        780 00142$:
      00019B 7F 00            [12]  781 	mov	r7,#0x00
      00019D                        782 00128$:
      00019D 90r00r01         [24]  783 	mov	dptr,#_rxBufferLength
      0001A0 E0               [24]  784 	movx	a,@dptr
      0001A1 FE               [12]  785 	mov	r6,a
      0001A2 7D 00            [12]  786 	mov	r5,#0x00
      0001A4 1E               [12]  787 	dec	r6
      0001A5 BE FF 01         [24]  788 	cjne	r6,#0xff,00238$
      0001A8 1D               [12]  789 	dec	r5
      0001A9                        790 00238$:
      0001A9 8F 03            [24]  791 	mov	ar3,r7
      0001AB 7C 00            [12]  792 	mov	r4,#0x00
      0001AD C3               [12]  793 	clr	c
      0001AE EB               [12]  794 	mov	a,r3
      0001AF 9E               [12]  795 	subb	a,r6
      0001B0 EC               [12]  796 	mov	a,r4
      0001B1 64 80            [12]  797 	xrl	a,#0x80
      0001B3 8D F0            [24]  798 	mov	b,r5
      0001B5 63 F0 80         [24]  799 	xrl	b,#0x80
      0001B8 95 F0            [12]  800 	subb	a,b
      0001BA 50 34            [24]  801 	jnc	00116$
                                    802 ;	./src/N76_I2C.c:163: set_AA;
      0001BC 43 C0 04         [24]  803 	orl	_i2con,#0x04
                                    804 ;	./src/N76_I2C.c:164: clr_SI;
      0001BF 53 C0 F7         [24]  805 	anl	_i2con,#0xf7
                                    806 ;	./src/N76_I2C.c:166: t = 0;
      0001C2 90r00r00         [24]  807 	mov	dptr,#_t
      0001C5 E4               [12]  808 	clr	a
      0001C6 F0               [24]  809 	movx	@dptr,a
                                    810 ;	./src/N76_I2C.c:167: while (inbit(I2CON, SI) == 0)
      0001C7                        811 00113$:
      0001C7 74 08            [12]  812 	mov	a,#0x08
      0001C9 55 C0            [12]  813 	anl	a,_i2con
      0001CB C4               [12]  814 	swap	a
      0001CC 23               [12]  815 	rl	a
      0001CD 54 1F            [12]  816 	anl	a,#0x1f
      0001CF 70 0F            [24]  817 	jnz	00115$
                                    818 ;	./src/N76_I2C.c:168: if (timeOut())
      0001D1 C0 07            [24]  819 	push	ar7
      0001D3 12r00r00         [24]  820 	lcall	_timeOut
      0001D6 E5 82            [12]  821 	mov	a, dpl
      0001D8 D0 07            [24]  822 	pop	ar7
      0001DA 60 EB            [24]  823 	jz	00113$
                                    824 ;	./src/N76_I2C.c:169: return 4;
      0001DC 75 82 04         [24]  825 	mov	dpl, #0x04
      0001DF 22               [24]  826 	ret
      0001E0                        827 00115$:
                                    828 ;	./src/N76_I2C.c:171: rxBuffer[i] = I2DAT;
      0001E0 EF               [12]  829 	mov	a,r7
      0001E1 24r02            [12]  830 	add	a, #_rxBuffer
      0001E3 F5 82            [12]  831 	mov	dpl,a
      0001E5 E4               [12]  832 	clr	a
      0001E6 34s00            [12]  833 	addc	a, #(_rxBuffer >> 8)
      0001E8 F5 83            [12]  834 	mov	dph,a
      0001EA E5 BC            [12]  835 	mov	a,_i2dat
      0001EC F0               [24]  836 	movx	@dptr,a
                                    837 ;	./src/N76_I2C.c:160: for (i = 0; i < rxBufferLength - 1; i++)
      0001ED 0F               [12]  838 	inc	r7
      0001EE 80 AD            [24]  839 	sjmp	00128$
      0001F0                        840 00116$:
                                    841 ;	./src/N76_I2C.c:175: clr_AA;
      0001F0 53 C0 FB         [24]  842 	anl	_i2con,#0xfb
                                    843 ;	./src/N76_I2C.c:176: clr_SI;
      0001F3 53 C0 F7         [24]  844 	anl	_i2con,#0xf7
                                    845 ;	./src/N76_I2C.c:178: t = 0;
      0001F6 90r00r00         [24]  846 	mov	dptr,#_t
      0001F9 E4               [12]  847 	clr	a
      0001FA F0               [24]  848 	movx	@dptr,a
                                    849 ;	./src/N76_I2C.c:179: while (inbit(I2CON, SI) == 0)
      0001FB                        850 00119$:
      0001FB 74 08            [12]  851 	mov	a,#0x08
      0001FD 55 C0            [12]  852 	anl	a,_i2con
      0001FF C4               [12]  853 	swap	a
      000200 23               [12]  854 	rl	a
      000201 54 1F            [12]  855 	anl	a,#0x1f
      000203 70 0B            [24]  856 	jnz	00121$
                                    857 ;	./src/N76_I2C.c:180: if (timeOut())
      000205 12r00r00         [24]  858 	lcall	_timeOut
      000208 E5 82            [12]  859 	mov	a, dpl
      00020A 60 EF            [24]  860 	jz	00119$
                                    861 ;	./src/N76_I2C.c:181: return 5;
      00020C 75 82 05         [24]  862 	mov	dpl, #0x05
      00020F 22               [24]  863 	ret
      000210                        864 00121$:
                                    865 ;	./src/N76_I2C.c:182: rxBuffer[rxBufferLength - 1] = I2DAT;
      000210 90r00r01         [24]  866 	mov	dptr,#_rxBufferLength
      000213 E0               [24]  867 	movx	a,@dptr
      000214 FF               [12]  868 	mov	r7,a
      000215 1F               [12]  869 	dec	r7
      000216 EF               [12]  870 	mov	a,r7
      000217 33               [12]  871 	rlc	a
      000218 95 E0            [12]  872 	subb	a,acc
      00021A FE               [12]  873 	mov	r6,a
      00021B EF               [12]  874 	mov	a,r7
      00021C 24r02            [12]  875 	add	a, #_rxBuffer
      00021E F5 82            [12]  876 	mov	dpl,a
      000220 EE               [12]  877 	mov	a,r6
      000221 34s00            [12]  878 	addc	a, #(_rxBuffer >> 8)
      000223 F5 83            [12]  879 	mov	dph,a
      000225 E5 BC            [12]  880 	mov	a,_i2dat
      000227 F0               [24]  881 	movx	@dptr,a
                                    882 ;	./src/N76_I2C.c:185: set_STO;
      000228 43 C0 10         [24]  883 	orl	_i2con,#0x10
                                    884 ;	./src/N76_I2C.c:186: clr_SI;
      00022B 53 C0 F7         [24]  885 	anl	_i2con,#0xf7
                                    886 ;	./src/N76_I2C.c:189: t = 0;
      00022E 90r00r00         [24]  887 	mov	dptr,#_t
      000231 E4               [12]  888 	clr	a
      000232 F0               [24]  889 	movx	@dptr,a
                                    890 ;	./src/N76_I2C.c:190: while (inbit(I2CON, STO) == 1)
      000233                        891 00124$:
      000233 74 10            [12]  892 	mov	a,#0x10
      000235 55 C0            [12]  893 	anl	a,_i2con
      000237 C4               [12]  894 	swap	a
      000238 54 0F            [12]  895 	anl	a,#0x0f
      00023A FF               [12]  896 	mov	r7,a
      00023B BF 01 0B         [24]  897 	cjne	r7,#0x01,00126$
                                    898 ;	./src/N76_I2C.c:191: if (timeOut())
      00023E 12r00r00         [24]  899 	lcall	_timeOut
      000241 E5 82            [12]  900 	mov	a, dpl
      000243 60 EE            [24]  901 	jz	00124$
                                    902 ;	./src/N76_I2C.c:192: return 6;
      000245 75 82 06         [24]  903 	mov	dpl, #0x06
      000248 22               [24]  904 	ret
      000249                        905 00126$:
                                    906 ;	./src/N76_I2C.c:197: return 0;
      000249 75 82 00         [24]  907 	mov	dpl, #0x00
                                    908 ;	./src/N76_I2C.c:198: }
      00024C 22               [24]  909 	ret
                                    910 ;------------------------------------------------------------
                                    911 ;Allocation info for local variables in function 'I2C_read'
                                    912 ;------------------------------------------------------------
                                    913 ;value                     Allocated to registers r7 
                                    914 ;------------------------------------------------------------
                                    915 ;	./src/N76_I2C.c:200: uint8_t I2C_read(void)
                                    916 ;	-----------------------------------------
                                    917 ;	 function I2C_read
                                    918 ;	-----------------------------------------
      00024D                        919 _I2C_read:
                                    920 ;	./src/N76_I2C.c:202: int8_t value = -1;
      00024D 7F FF            [12]  921 	mov	r7,#0xff
                                    922 ;	./src/N76_I2C.c:204: if (rxBufferIndex < rxBufferLength)
      00024F 90r00r00         [24]  923 	mov	dptr,#_rxBufferIndex
      000252 E0               [24]  924 	movx	a,@dptr
      000253 FE               [12]  925 	mov	r6,a
      000254 90r00r01         [24]  926 	mov	dptr,#_rxBufferLength
      000257 E0               [24]  927 	movx	a,@dptr
      000258 FD               [12]  928 	mov	r5,a
      000259 C3               [12]  929 	clr	c
      00025A EE               [12]  930 	mov	a,r6
      00025B 9D               [12]  931 	subb	a,r5
      00025C 50 12            [24]  932 	jnc	00102$
                                    933 ;	./src/N76_I2C.c:206: value = rxBuffer[rxBufferIndex];
      00025E EE               [12]  934 	mov	a,r6
      00025F 24r02            [12]  935 	add	a, #_rxBuffer
      000261 F5 82            [12]  936 	mov	dpl,a
      000263 E4               [12]  937 	clr	a
      000264 34s00            [12]  938 	addc	a, #(_rxBuffer >> 8)
      000266 F5 83            [12]  939 	mov	dph,a
      000268 E0               [24]  940 	movx	a,@dptr
      000269 FF               [12]  941 	mov	r7,a
                                    942 ;	./src/N76_I2C.c:207: ++rxBufferIndex;
      00026A 90r00r00         [24]  943 	mov	dptr,#_rxBufferIndex
      00026D EE               [12]  944 	mov	a,r6
      00026E 04               [12]  945 	inc	a
      00026F F0               [24]  946 	movx	@dptr,a
      000270                        947 00102$:
                                    948 ;	./src/N76_I2C.c:209: return value;
      000270 8F 82            [24]  949 	mov	dpl, r7
                                    950 ;	./src/N76_I2C.c:210: }
      000272 22               [24]  951 	ret
                                    952 ;------------------------------------------------------------
                                    953 ;Allocation info for local variables in function 'I2C_available'
                                    954 ;------------------------------------------------------------
                                    955 ;	./src/N76_I2C.c:212: int16_t I2C_available(void)
                                    956 ;	-----------------------------------------
                                    957 ;	 function I2C_available
                                    958 ;	-----------------------------------------
      000273                        959 _I2C_available:
                                    960 ;	./src/N76_I2C.c:214: return rxBufferLength - rxBufferIndex;
      000273 90r00r01         [24]  961 	mov	dptr,#_rxBufferLength
      000276 E0               [24]  962 	movx	a,@dptr
      000277 FF               [12]  963 	mov	r7,a
      000278 7E 00            [12]  964 	mov	r6,#0x00
      00027A 90r00r00         [24]  965 	mov	dptr,#_rxBufferIndex
      00027D E0               [24]  966 	movx	a,@dptr
      00027E FD               [12]  967 	mov	r5,a
      00027F 7C 00            [12]  968 	mov	r4,#0x00
      000281 EF               [12]  969 	mov	a,r7
      000282 C3               [12]  970 	clr	c
      000283 9D               [12]  971 	subb	a,r5
      000284 FF               [12]  972 	mov	r7,a
      000285 EE               [12]  973 	mov	a,r6
      000286 9C               [12]  974 	subb	a,r4
                                    975 ;	./src/N76_I2C.c:215: }
      000287 8F 82            [24]  976 	mov	dpl,r7
      000289 F5 83            [12]  977 	mov	dph,a
      00028B 22               [24]  978 	ret
                                    979 	.area CSEG    (CODE)
                                    980 	.area CONST   (CODE)
                                    981 	.area XINIT   (CODE)
      000000                        982 __xinit__t:
      000000 00                     983 	.db #0x00	; 0
                                    984 	.area CABS    (ABS,CODE)
