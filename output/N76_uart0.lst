                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module N76_uart0
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _eiph1
                                     12 	.globl _eip1
                                     13 	.globl _pmd
                                     14 	.globl _pmen
                                     15 	.globl _pdtcnt
                                     16 	.globl _pdten
                                     17 	.globl _scon_1
                                     18 	.globl _eiph
                                     19 	.globl _aindids
                                     20 	.globl _spdr
                                     21 	.globl _spsr
                                     22 	.globl _spcr2
                                     23 	.globl _spcr
                                     24 	.globl _capcon4
                                     25 	.globl _capcon3
                                     26 	.globl _b
                                     27 	.globl _eip
                                     28 	.globl _c2h
                                     29 	.globl _c2l
                                     30 	.globl _pif
                                     31 	.globl _pipen
                                     32 	.globl _pinen
                                     33 	.globl _picon
                                     34 	.globl _adccon0
                                     35 	.globl _c1h
                                     36 	.globl _c1l
                                     37 	.globl _c0h
                                     38 	.globl _c0l
                                     39 	.globl _adcdly
                                     40 	.globl _adccon2
                                     41 	.globl _adccon1
                                     42 	.globl _acc
                                     43 	.globl _pwmcon1
                                     44 	.globl _piocon0
                                     45 	.globl _pwm3l
                                     46 	.globl _pwm2l
                                     47 	.globl _pwm1l
                                     48 	.globl _pwm0l
                                     49 	.globl _pwmpl
                                     50 	.globl _pwmcon0
                                     51 	.globl _fbd
                                     52 	.globl _pnp
                                     53 	.globl _pwm3h
                                     54 	.globl _pwm2h
                                     55 	.globl _pwm1h
                                     56 	.globl _pwm0h
                                     57 	.globl _pwmph
                                     58 	.globl _psw
                                     59 	.globl _adcmph
                                     60 	.globl _adcmpl
                                     61 	.globl _pwm5l
                                     62 	.globl _th2
                                     63 	.globl _pwm4l
                                     64 	.globl _tl2
                                     65 	.globl _rcmp2h
                                     66 	.globl _rcmp2l
                                     67 	.globl _t2mod
                                     68 	.globl _t2con
                                     69 	.globl _ta
                                     70 	.globl _piocon1
                                     71 	.globl _rh3
                                     72 	.globl _pwm5h
                                     73 	.globl _rl3
                                     74 	.globl _pwm4h
                                     75 	.globl _t3con
                                     76 	.globl _adcrh
                                     77 	.globl _adcrl
                                     78 	.globl _i2addr
                                     79 	.globl _i2con
                                     80 	.globl _i2toc
                                     81 	.globl _i2clk
                                     82 	.globl _i2stat
                                     83 	.globl _i2dat
                                     84 	.globl _saddr_1
                                     85 	.globl _saden_1
                                     86 	.globl _saden
                                     87 	.globl _ip
                                     88 	.globl _pwmintc
                                     89 	.globl _iph
                                     90 	.globl _p2s
                                     91 	.globl _p1sr
                                     92 	.globl _p1m2
                                     93 	.globl _p1s
                                     94 	.globl _p1m1
                                     95 	.globl _p0sr
                                     96 	.globl _p0m2
                                     97 	.globl _p0s
                                     98 	.globl _p0m1
                                     99 	.globl _p3
                                    100 	.globl _iapcn
                                    101 	.globl _iapfd
                                    102 	.globl _p3sr
                                    103 	.globl _p3m2
                                    104 	.globl _p3s
                                    105 	.globl _p3m1
                                    106 	.globl _bodcon1
                                    107 	.globl _wdcon
                                    108 	.globl _saddr
                                    109 	.globl _ie
                                    110 	.globl _iapah
                                    111 	.globl _iapal
                                    112 	.globl _iapuen
                                    113 	.globl _iaptrg
                                    114 	.globl _bodcon0
                                    115 	.globl _auxr1
                                    116 	.globl _p2
                                    117 	.globl _chpcon
                                    118 	.globl _eie1
                                    119 	.globl _eie
                                    120 	.globl _sbuf_1
                                    121 	.globl _sbuf
                                    122 	.globl _scon
                                    123 	.globl _cken
                                    124 	.globl _ckswt
                                    125 	.globl _ckdiv
                                    126 	.globl _capcon2
                                    127 	.globl _capcon1
                                    128 	.globl _capcon0
                                    129 	.globl _sfrs
                                    130 	.globl _p1
                                    131 	.globl _wkcon
                                    132 	.globl _ckcon
                                    133 	.globl _th1
                                    134 	.globl _th0
                                    135 	.globl _tl1
                                    136 	.globl _tl0
                                    137 	.globl _tmod
                                    138 	.globl _tcon
                                    139 	.globl _pcon
                                    140 	.globl _rwk
                                    141 	.globl _rctrim1
                                    142 	.globl _rctrim0
                                    143 	.globl _dph
                                    144 	.globl _dpl
                                    145 	.globl _sp
                                    146 	.globl _p0
                                    147 	.globl __rx_buffer
                                    148 	.globl __rx_buffer_tail
                                    149 	.globl __rx_buffer_head
                                    150 	.globl _UART0_printNumln_PARM_2
                                    151 	.globl _UART0_printNum_PARM_2
                                    152 	.globl _UART0_begin
                                    153 	.globl _UART0_putChar
                                    154 	.globl _UART0_print
                                    155 	.globl _UART0_println
                                    156 	.globl _UART0_printNum
                                    157 	.globl _UART0_printNumln
                                    158 	.globl _UART0_available
                                    159 	.globl _UART0_read
                                    160 	.globl _UART0_attachInterrupt
                                    161 	.globl _UART0_detachInterrupt
                                    162 	.globl _UART0_INT_FUCTION
                                    163 ;--------------------------------------------------------
                                    164 ; special function registers
                                    165 ;--------------------------------------------------------
                                    166 	.area RSEG    (ABS,DATA)
      000000                        167 	.org 0x0000
                           000080   168 _p0	=	0x0080
                           000081   169 _sp	=	0x0081
                           000082   170 _dpl	=	0x0082
                           000083   171 _dph	=	0x0083
                           000084   172 _rctrim0	=	0x0084
                           000085   173 _rctrim1	=	0x0085
                           000086   174 _rwk	=	0x0086
                           000087   175 _pcon	=	0x0087
                           000088   176 _tcon	=	0x0088
                           000089   177 _tmod	=	0x0089
                           00008A   178 _tl0	=	0x008a
                           00008B   179 _tl1	=	0x008b
                           00008C   180 _th0	=	0x008c
                           00008D   181 _th1	=	0x008d
                           00008E   182 _ckcon	=	0x008e
                           00008F   183 _wkcon	=	0x008f
                           000090   184 _p1	=	0x0090
                           000091   185 _sfrs	=	0x0091
                           000092   186 _capcon0	=	0x0092
                           000093   187 _capcon1	=	0x0093
                           000094   188 _capcon2	=	0x0094
                           000095   189 _ckdiv	=	0x0095
                           000096   190 _ckswt	=	0x0096
                           000097   191 _cken	=	0x0097
                           000098   192 _scon	=	0x0098
                           000099   193 _sbuf	=	0x0099
                           00009A   194 _sbuf_1	=	0x009a
                           00009B   195 _eie	=	0x009b
                           00009C   196 _eie1	=	0x009c
                           00009F   197 _chpcon	=	0x009f
                           0000A0   198 _p2	=	0x00a0
                           0000A2   199 _auxr1	=	0x00a2
                           0000A3   200 _bodcon0	=	0x00a3
                           0000A4   201 _iaptrg	=	0x00a4
                           0000A5   202 _iapuen	=	0x00a5
                           0000A6   203 _iapal	=	0x00a6
                           0000A7   204 _iapah	=	0x00a7
                           0000A8   205 _ie	=	0x00a8
                           0000A9   206 _saddr	=	0x00a9
                           0000AA   207 _wdcon	=	0x00aa
                           0000AB   208 _bodcon1	=	0x00ab
                           0000AC   209 _p3m1	=	0x00ac
                           0000AC   210 _p3s	=	0x00ac
                           0000AD   211 _p3m2	=	0x00ad
                           0000AD   212 _p3sr	=	0x00ad
                           0000AE   213 _iapfd	=	0x00ae
                           0000AF   214 _iapcn	=	0x00af
                           0000B0   215 _p3	=	0x00b0
                           0000B1   216 _p0m1	=	0x00b1
                           0000B1   217 _p0s	=	0x00b1
                           0000B2   218 _p0m2	=	0x00b2
                           0000B2   219 _p0sr	=	0x00b2
                           0000B3   220 _p1m1	=	0x00b3
                           0000B3   221 _p1s	=	0x00b3
                           0000B4   222 _p1m2	=	0x00b4
                           0000B4   223 _p1sr	=	0x00b4
                           0000B5   224 _p2s	=	0x00b5
                           0000B7   225 _iph	=	0x00b7
                           0000B7   226 _pwmintc	=	0x00b7
                           0000B8   227 _ip	=	0x00b8
                           0000B9   228 _saden	=	0x00b9
                           0000BA   229 _saden_1	=	0x00ba
                           0000BB   230 _saddr_1	=	0x00bb
                           0000BC   231 _i2dat	=	0x00bc
                           0000BD   232 _i2stat	=	0x00bd
                           0000BE   233 _i2clk	=	0x00be
                           0000BF   234 _i2toc	=	0x00bf
                           0000C0   235 _i2con	=	0x00c0
                           0000C1   236 _i2addr	=	0x00c1
                           0000C2   237 _adcrl	=	0x00c2
                           0000C3   238 _adcrh	=	0x00c3
                           0000C4   239 _t3con	=	0x00c4
                           0000C4   240 _pwm4h	=	0x00c4
                           0000C5   241 _rl3	=	0x00c5
                           0000C5   242 _pwm5h	=	0x00c5
                           0000C6   243 _rh3	=	0x00c6
                           0000C6   244 _piocon1	=	0x00c6
                           0000C7   245 _ta	=	0x00c7
                           0000C8   246 _t2con	=	0x00c8
                           0000C9   247 _t2mod	=	0x00c9
                           0000CA   248 _rcmp2l	=	0x00ca
                           0000CB   249 _rcmp2h	=	0x00cb
                           0000CC   250 _tl2	=	0x00cc
                           0000CC   251 _pwm4l	=	0x00cc
                           0000CD   252 _th2	=	0x00cd
                           0000CD   253 _pwm5l	=	0x00cd
                           0000CE   254 _adcmpl	=	0x00ce
                           0000CF   255 _adcmph	=	0x00cf
                           0000D0   256 _psw	=	0x00d0
                           0000D1   257 _pwmph	=	0x00d1
                           0000D2   258 _pwm0h	=	0x00d2
                           0000D3   259 _pwm1h	=	0x00d3
                           0000D4   260 _pwm2h	=	0x00d4
                           0000D5   261 _pwm3h	=	0x00d5
                           0000D6   262 _pnp	=	0x00d6
                           0000D7   263 _fbd	=	0x00d7
                           0000D8   264 _pwmcon0	=	0x00d8
                           0000D9   265 _pwmpl	=	0x00d9
                           0000DA   266 _pwm0l	=	0x00da
                           0000DB   267 _pwm1l	=	0x00db
                           0000DC   268 _pwm2l	=	0x00dc
                           0000DD   269 _pwm3l	=	0x00dd
                           0000DE   270 _piocon0	=	0x00de
                           0000DF   271 _pwmcon1	=	0x00df
                           0000E0   272 _acc	=	0x00e0
                           0000E1   273 _adccon1	=	0x00e1
                           0000E2   274 _adccon2	=	0x00e2
                           0000E3   275 _adcdly	=	0x00e3
                           0000E4   276 _c0l	=	0x00e4
                           0000E5   277 _c0h	=	0x00e5
                           0000E6   278 _c1l	=	0x00e6
                           0000E7   279 _c1h	=	0x00e7
                           0000E8   280 _adccon0	=	0x00e8
                           0000E9   281 _picon	=	0x00e9
                           0000EA   282 _pinen	=	0x00ea
                           0000EB   283 _pipen	=	0x00eb
                           0000EC   284 _pif	=	0x00ec
                           0000ED   285 _c2l	=	0x00ed
                           0000EE   286 _c2h	=	0x00ee
                           0000EF   287 _eip	=	0x00ef
                           0000F0   288 _b	=	0x00f0
                           0000F1   289 _capcon3	=	0x00f1
                           0000F2   290 _capcon4	=	0x00f2
                           0000F3   291 _spcr	=	0x00f3
                           0000F3   292 _spcr2	=	0x00f3
                           0000F4   293 _spsr	=	0x00f4
                           0000F5   294 _spdr	=	0x00f5
                           0000F6   295 _aindids	=	0x00f6
                           0000F7   296 _eiph	=	0x00f7
                           0000F8   297 _scon_1	=	0x00f8
                           0000F9   298 _pdten	=	0x00f9
                           0000FA   299 _pdtcnt	=	0x00fa
                           0000FB   300 _pmen	=	0x00fb
                           0000FC   301 _pmd	=	0x00fc
                           0000FE   302 _eip1	=	0x00fe
                           0000FF   303 _eiph1	=	0x00ff
                                    304 ;--------------------------------------------------------
                                    305 ; special function bits
                                    306 ;--------------------------------------------------------
                                    307 	.area RSEG    (ABS,DATA)
      000000                        308 	.org 0x0000
                                    309 ;--------------------------------------------------------
                                    310 ; overlayable register banks
                                    311 ;--------------------------------------------------------
                                    312 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        313 	.ds 8
                                    314 ;--------------------------------------------------------
                                    315 ; internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area DSEG    (DATA)
      000000                        318 _UART0_printNum_PARM_2:
      000000                        319 	.ds 1
      000001                        320 _UART0_printNum_i_20000_42:
      000001                        321 	.ds 1
      000002                        322 _UART0_printNum_sloc0_1_0:
      000002                        323 	.ds 4
      000006                        324 _UART0_printNum_sloc1_1_0:
      000006                        325 	.ds 4
      00000A                        326 _UART0_printNumln_PARM_2:
      00000A                        327 	.ds 1
                                    328 ;--------------------------------------------------------
                                    329 ; overlayable items in internal ram
                                    330 ;--------------------------------------------------------
                                    331 	.area	OSEG    (OVR,DATA)
                                    332 	.area	OSEG    (OVR,DATA)
                                    333 	.area	OSEG    (OVR,DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; indirectly addressable internal ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area ISEG    (DATA)
                                    338 ;--------------------------------------------------------
                                    339 ; absolute internal ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area IABS    (ABS,DATA)
                                    342 	.area IABS    (ABS,DATA)
                                    343 ;--------------------------------------------------------
                                    344 ; bit data
                                    345 ;--------------------------------------------------------
                                    346 	.area BSEG    (BIT)
                                    347 ;--------------------------------------------------------
                                    348 ; paged external ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area PSEG    (PAG,XDATA)
                                    351 ;--------------------------------------------------------
                                    352 ; uninitialized external ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area XSEG    (XDATA)
      000000                        355 __rx_buffer_head::
      000000                        356 	.ds 1
      000001                        357 __rx_buffer_tail::
      000001                        358 	.ds 1
      000002                        359 __rx_buffer::
      000002                        360 	.ds 16
      000012                        361 _UART0_printNum_dis_10000_36:
      000012                        362 	.ds 20
                                    363 ;--------------------------------------------------------
                                    364 ; absolute external ram data
                                    365 ;--------------------------------------------------------
                                    366 	.area XABS    (ABS,XDATA)
                                    367 ;--------------------------------------------------------
                                    368 ; initialized external ram data
                                    369 ;--------------------------------------------------------
                                    370 	.area XISEG   (XDATA)
                                    371 	.area HOME    (CODE)
                                    372 	.area GSINIT0 (CODE)
                                    373 	.area GSINIT1 (CODE)
                                    374 	.area GSINIT2 (CODE)
                                    375 	.area GSINIT3 (CODE)
                                    376 	.area GSINIT4 (CODE)
                                    377 	.area GSINIT5 (CODE)
                                    378 	.area GSINIT  (CODE)
                                    379 	.area GSFINAL (CODE)
                                    380 	.area CSEG    (CODE)
                                    381 ;--------------------------------------------------------
                                    382 ; global & static initialisations
                                    383 ;--------------------------------------------------------
                                    384 	.area HOME    (CODE)
                                    385 	.area GSINIT  (CODE)
                                    386 	.area GSFINAL (CODE)
                                    387 	.area GSINIT  (CODE)
                                    388 ;--------------------------------------------------------
                                    389 ; Home
                                    390 ;--------------------------------------------------------
                                    391 	.area HOME    (CODE)
                                    392 	.area HOME    (CODE)
                                    393 ;--------------------------------------------------------
                                    394 ; code
                                    395 ;--------------------------------------------------------
                                    396 	.area CSEG    (CODE)
                                    397 ;------------------------------------------------------------
                                    398 ;Allocation info for local variables in function 'UART0_begin'
                                    399 ;------------------------------------------------------------
                                    400 ;baud                      Allocated to registers r7 
                                    401 ;------------------------------------------------------------
                                    402 ;	./src/N76_uart0.c:15: void UART0_begin(uint8_t baud)
                                    403 ;	-----------------------------------------
                                    404 ;	 function UART0_begin
                                    405 ;	-----------------------------------------
      000000                        406 _UART0_begin:
                           000007   407 	ar7 = 0x07
                           000006   408 	ar6 = 0x06
                           000005   409 	ar5 = 0x05
                           000004   410 	ar4 = 0x04
                           000003   411 	ar3 = 0x03
                           000002   412 	ar2 = 0x02
                           000001   413 	ar1 = 0x01
                           000000   414 	ar0 = 0x00
      000000 AF 82            [24]  415 	mov	r7, dpl
                                    416 ;	./src/N76_uart0.c:17: P06_Quasi_Mode; // Setting UART pin as Quasi mode for transmit
      000002 53 B1 BF         [24]  417 	anl	_p0m1,#0xbf
      000005 53 B2 BF         [24]  418 	anl	_p0m2,#0xbf
                                    419 ;	./src/N76_uart0.c:18: P07_Quasi_Mode; // Setting UART pin as Quasi mode for transmit
      000008 53 B1 7F         [24]  420 	anl	_p0m1,#0x7f
      00000B 53 B2 7F         [24]  421 	anl	_p0m2,#0x7f
                                    422 ;	./src/N76_uart0.c:20: TH1 = baud;   // set baudrate
      00000E 8F 8D            [24]  423 	mov	_th1,r7
                                    424 ;	./src/N76_uart0.c:21: SCON = 0x50;  // UART0 Mode1,REN=1,TI=1
      000010 75 98 50         [24]  425 	mov	_scon,#0x50
                                    426 ;	./src/N76_uart0.c:22: TMOD |= 0x20; // Timer1 Mode1
      000013 43 89 20         [24]  427 	orl	_tmod,#0x20
                                    428 ;	./src/N76_uart0.c:23: set_SMOD;     // UART0 Double Rate Enable
      000016 43 87 80         [24]  429 	orl	_pcon,#0x80
                                    430 ;	./src/N76_uart0.c:24: set_T1M;
      000019 43 8E 10         [24]  431 	orl	_ckcon,#0x10
                                    432 ;	./src/N76_uart0.c:25: clr_BRCK; // Serial port 0 baud rate clock source = Timer1
      00001C 53 C4 DF         [24]  433 	anl	_t3con,#0xdf
                                    434 ;	./src/N76_uart0.c:26: set_TR1;
      00001F 43 88 40         [24]  435 	orl	_tcon,#0x40
                                    436 ;	./src/N76_uart0.c:27: set_TI; // For printf function must setting TI = 1
      000022 43 98 02         [24]  437 	orl	_scon,#0x02
                                    438 ;	./src/N76_uart0.c:28: }
      000025 22               [24]  439 	ret
                                    440 ;------------------------------------------------------------
                                    441 ;Allocation info for local variables in function 'UART0_putChar'
                                    442 ;------------------------------------------------------------
                                    443 ;val                       Allocated to registers r7 
                                    444 ;------------------------------------------------------------
                                    445 ;	./src/N76_uart0.c:30: void UART0_putChar(uint8_t val)
                                    446 ;	-----------------------------------------
                                    447 ;	 function UART0_putChar
                                    448 ;	-----------------------------------------
      000026                        449 _UART0_putChar:
      000026 AF 82            [24]  450 	mov	r7, dpl
                                    451 ;	./src/N76_uart0.c:32: clr_TI;
      000028 53 98 FD         [24]  452 	anl	_scon,#0xfd
                                    453 ;	./src/N76_uart0.c:33: SBUF = val;
      00002B 8F 99            [24]  454 	mov	_sbuf,r7
                                    455 ;	./src/N76_uart0.c:34: while (inbit(SCON, TI) == 0)
      00002D                        456 00101$:
      00002D 74 02            [12]  457 	mov	a,#0x02
      00002F 55 98            [12]  458 	anl	a,_scon
      000031 C3               [12]  459 	clr	c
      000032 13               [12]  460 	rrc	a
      000033 60 F8            [24]  461 	jz	00101$
                                    462 ;	./src/N76_uart0.c:36: }
      000035 22               [24]  463 	ret
                                    464 ;------------------------------------------------------------
                                    465 ;Allocation info for local variables in function 'UART0_print'
                                    466 ;------------------------------------------------------------
                                    467 ;str                       Allocated to registers r5 r6 r7 
                                    468 ;i                         Allocated to registers r4 
                                    469 ;------------------------------------------------------------
                                    470 ;	./src/N76_uart0.c:38: void UART0_print(char *str)
                                    471 ;	-----------------------------------------
                                    472 ;	 function UART0_print
                                    473 ;	-----------------------------------------
      000036                        474 _UART0_print:
      000036 AD 82            [24]  475 	mov	r5, dpl
      000038 AE 83            [24]  476 	mov	r6, dph
      00003A AF F0            [24]  477 	mov	r7, b
                                    478 ;	./src/N76_uart0.c:41: while (str[i] != '\0')
      00003C 7C 00            [12]  479 	mov	r4,#0x00
      00003E                        480 00101$:
      00003E EC               [12]  481 	mov	a,r4
      00003F 2D               [12]  482 	add	a, r5
      000040 F9               [12]  483 	mov	r1,a
      000041 E4               [12]  484 	clr	a
      000042 3E               [12]  485 	addc	a, r6
      000043 FA               [12]  486 	mov	r2,a
      000044 8F 03            [24]  487 	mov	ar3,r7
      000046 89 82            [24]  488 	mov	dpl,r1
      000048 8A 83            [24]  489 	mov	dph,r2
      00004A 8B F0            [24]  490 	mov	b,r3
      00004C 12r00r00         [24]  491 	lcall	__gptrget
      00004F 60 29            [24]  492 	jz	00104$
                                    493 ;	./src/N76_uart0.c:42: UART0_putChar(str[i++]);
      000051 EC               [12]  494 	mov	a,r4
      000052 2D               [12]  495 	add	a, r5
      000053 F9               [12]  496 	mov	r1,a
      000054 E4               [12]  497 	clr	a
      000055 3E               [12]  498 	addc	a, r6
      000056 FA               [12]  499 	mov	r2,a
      000057 8F 03            [24]  500 	mov	ar3,r7
      000059 0C               [12]  501 	inc	r4
      00005A 89 82            [24]  502 	mov	dpl,r1
      00005C 8A 83            [24]  503 	mov	dph,r2
      00005E 8B F0            [24]  504 	mov	b,r3
      000060 12r00r00         [24]  505 	lcall	__gptrget
      000063 F5 82            [12]  506 	mov	dpl,a
      000065 C0 07            [24]  507 	push	ar7
      000067 C0 06            [24]  508 	push	ar6
      000069 C0 05            [24]  509 	push	ar5
      00006B C0 04            [24]  510 	push	ar4
      00006D 12r00r26         [24]  511 	lcall	_UART0_putChar
      000070 D0 04            [24]  512 	pop	ar4
      000072 D0 05            [24]  513 	pop	ar5
      000074 D0 06            [24]  514 	pop	ar6
      000076 D0 07            [24]  515 	pop	ar7
      000078 80 C4            [24]  516 	sjmp	00101$
      00007A                        517 00104$:
                                    518 ;	./src/N76_uart0.c:43: }
      00007A 22               [24]  519 	ret
                                    520 ;------------------------------------------------------------
                                    521 ;Allocation info for local variables in function 'UART0_println'
                                    522 ;------------------------------------------------------------
                                    523 ;str                       Allocated to registers r5 r6 r7 
                                    524 ;------------------------------------------------------------
                                    525 ;	./src/N76_uart0.c:45: void UART0_println(char *str)
                                    526 ;	-----------------------------------------
                                    527 ;	 function UART0_println
                                    528 ;	-----------------------------------------
      00007B                        529 _UART0_println:
                                    530 ;	./src/N76_uart0.c:47: UART0_print(str);
      00007B 12r00r36         [24]  531 	lcall	_UART0_print
                                    532 ;	./src/N76_uart0.c:48: UART0_print("\r\n");
      00007E 90r00r00         [24]  533 	mov	dptr,#___str_0
      000081 75 F0 80         [24]  534 	mov	b, #0x80
                                    535 ;	./src/N76_uart0.c:49: }
      000084 02r00r36         [24]  536 	ljmp	_UART0_print
                                    537 ;------------------------------------------------------------
                                    538 ;Allocation info for local variables in function 'UART0_printNum'
                                    539 ;------------------------------------------------------------
                                    540 ;base                      Allocated with name '_UART0_printNum_PARM_2'
                                    541 ;num                       Allocated to registers r4 r5 r6 r7 
                                    542 ;max                       Allocated to registers r5 
                                    543 ;flag                      Allocated to registers r2 
                                    544 ;i                         Allocated with name '_UART0_printNum_i_20000_42'
                                    545 ;sloc0                     Allocated with name '_UART0_printNum_sloc0_1_0'
                                    546 ;sloc1                     Allocated with name '_UART0_printNum_sloc1_1_0'
                                    547 ;dis                       Allocated with name '_UART0_printNum_dis_10000_36'
                                    548 ;------------------------------------------------------------
                                    549 ;	./src/N76_uart0.c:51: void UART0_printNum(int32_t num, uint8_t base)
                                    550 ;	-----------------------------------------
                                    551 ;	 function UART0_printNum
                                    552 ;	-----------------------------------------
      000087                        553 _UART0_printNum:
      000087 AC 82            [24]  554 	mov	r4,dpl
      000089 AD 83            [24]  555 	mov	r5,dph
      00008B AE F0            [24]  556 	mov	r6,b
      00008D FF               [12]  557 	mov	r7,a
                                    558 ;	./src/N76_uart0.c:54: int8_t max = 0, flag = 0; // max: index of dis array, flag: = 1 if negative
                                    559 ;	./src/N76_uart0.c:56: if (num == 0) // input 0
      00008E E4               [12]  560 	clr	a
      00008F FB               [12]  561 	mov	r3,a
      000090 FA               [12]  562 	mov	r2,a
      000091 EC               [12]  563 	mov	a,r4
      000092 4D               [12]  564 	orl	a,r5
      000093 4E               [12]  565 	orl	a,r6
      000094 4F               [12]  566 	orl	a,r7
      000095 70 0A            [24]  567 	jnz	00104$
                                    568 ;	./src/N76_uart0.c:58: dis[max++] = '0';
      000097 7B 01            [12]  569 	mov	r3,#0x01
      000099 90r00r12         [24]  570 	mov	dptr,#_UART0_printNum_dis_10000_36
      00009C 74 30            [12]  571 	mov	a,#0x30
      00009E F0               [24]  572 	movx	@dptr,a
      00009F 80 13            [24]  573 	sjmp	00131$
      0000A1                        574 00104$:
                                    575 ;	./src/N76_uart0.c:60: else if (num < 0) // negative number
      0000A1 EF               [12]  576 	mov	a,r7
      0000A2 30 E7 0F         [24]  577 	jnb	acc.7,00131$
                                    578 ;	./src/N76_uart0.c:62: num = 0 - num;
      0000A5 C3               [12]  579 	clr	c
      0000A6 E4               [12]  580 	clr	a
      0000A7 9C               [12]  581 	subb	a,r4
      0000A8 FC               [12]  582 	mov	r4,a
      0000A9 E4               [12]  583 	clr	a
      0000AA 9D               [12]  584 	subb	a,r5
      0000AB FD               [12]  585 	mov	r5,a
      0000AC E4               [12]  586 	clr	a
      0000AD 9E               [12]  587 	subb	a,r6
      0000AE FE               [12]  588 	mov	r6,a
      0000AF E4               [12]  589 	clr	a
      0000B0 9F               [12]  590 	subb	a,r7
      0000B1 FF               [12]  591 	mov	r7,a
                                    592 ;	./src/N76_uart0.c:63: flag = 1;
      0000B2 7A 01            [12]  593 	mov	r2,#0x01
                                    594 ;	./src/N76_uart0.c:65: while (num > 0) // convert to base number and add to dis array
      0000B4                        595 00131$:
      0000B4                        596 00109$:
      0000B4 C3               [12]  597 	clr	c
      0000B5 E4               [12]  598 	clr	a
      0000B6 9C               [12]  599 	subb	a,r4
      0000B7 E4               [12]  600 	clr	a
      0000B8 9D               [12]  601 	subb	a,r5
      0000B9 E4               [12]  602 	clr	a
      0000BA 9E               [12]  603 	subb	a,r6
      0000BB 74 80            [12]  604 	mov	a,#(0x00 ^ 0x80)
      0000BD 8F F0            [24]  605 	mov	b,r7
      0000BF 63 F0 80         [24]  606 	xrl	b,#0x80
      0000C2 95 F0            [12]  607 	subb	a,b
      0000C4 40 03            [24]  608 	jc	00208$
      0000C6 02r01r7A         [24]  609 	ljmp	00138$
      0000C9                        610 00208$:
                                    611 ;	./src/N76_uart0.c:67: if (num % base >= 10)
      0000C9 85*00*02         [24]  612 	mov	_UART0_printNum_sloc0_1_0,_UART0_printNum_PARM_2
      0000CC 75*03 00         [24]  613 	mov	(_UART0_printNum_sloc0_1_0 + 1),#0x00
      0000CF 75*04 00         [24]  614 	mov	(_UART0_printNum_sloc0_1_0 + 2),#0x00
      0000D2 75*05 00         [24]  615 	mov	(_UART0_printNum_sloc0_1_0 + 3),#0x00
      0000D5 85*02*00         [24]  616 	mov	__modslong_PARM_2,_UART0_printNum_sloc0_1_0
      0000D8 85*03*01         [24]  617 	mov	(__modslong_PARM_2 + 1),(_UART0_printNum_sloc0_1_0 + 1)
      0000DB 85*04*02         [24]  618 	mov	(__modslong_PARM_2 + 2),(_UART0_printNum_sloc0_1_0 + 2)
      0000DE 85*05*03         [24]  619 	mov	(__modslong_PARM_2 + 3),(_UART0_printNum_sloc0_1_0 + 3)
      0000E1 8C 82            [24]  620 	mov	dpl, r4
      0000E3 8D 83            [24]  621 	mov	dph, r5
      0000E5 8E F0            [24]  622 	mov	b, r6
      0000E7 EF               [12]  623 	mov	a, r7
      0000E8 C0 07            [24]  624 	push	ar7
      0000EA C0 06            [24]  625 	push	ar6
      0000EC C0 05            [24]  626 	push	ar5
      0000EE C0 04            [24]  627 	push	ar4
      0000F0 C0 03            [24]  628 	push	ar3
      0000F2 C0 02            [24]  629 	push	ar2
      0000F4 12r00r00         [24]  630 	lcall	__modslong
      0000F7 85 82*06         [24]  631 	mov	_UART0_printNum_sloc1_1_0,dpl
      0000FA 85 83*07         [24]  632 	mov	(_UART0_printNum_sloc1_1_0 + 1),dph
      0000FD 85 F0*08         [24]  633 	mov	(_UART0_printNum_sloc1_1_0 + 2),b
      000100 F5*09            [12]  634 	mov	(_UART0_printNum_sloc1_1_0 + 3),a
      000102 D0 02            [24]  635 	pop	ar2
      000104 D0 03            [24]  636 	pop	ar3
      000106 D0 04            [24]  637 	pop	ar4
      000108 D0 05            [24]  638 	pop	ar5
      00010A D0 06            [24]  639 	pop	ar6
      00010C D0 07            [24]  640 	pop	ar7
      00010E C3               [12]  641 	clr	c
      00010F E5*06            [12]  642 	mov	a,_UART0_printNum_sloc1_1_0
      000111 94 0A            [12]  643 	subb	a,#0x0a
      000113 E5*07            [12]  644 	mov	a,(_UART0_printNum_sloc1_1_0 + 1)
      000115 94 00            [12]  645 	subb	a,#0x00
      000117 E5*08            [12]  646 	mov	a,(_UART0_printNum_sloc1_1_0 + 2)
      000119 94 00            [12]  647 	subb	a,#0x00
      00011B E5*09            [12]  648 	mov	a,(_UART0_printNum_sloc1_1_0 + 3)
      00011D 64 80            [12]  649 	xrl	a,#0x80
      00011F 94 80            [12]  650 	subb	a,#0x80
      000121 40 18            [24]  651 	jc	00107$
                                    652 ;	./src/N76_uart0.c:68: dis[max] = num % base + 55;
      000123 EB               [12]  653 	mov	a,r3
      000124 F8               [12]  654 	mov	r0,a
      000125 33               [12]  655 	rlc	a
      000126 95 E0            [12]  656 	subb	a,acc
      000128 F9               [12]  657 	mov	r1,a
      000129 E8               [12]  658 	mov	a,r0
      00012A 24r12            [12]  659 	add	a, #_UART0_printNum_dis_10000_36
      00012C F5 82            [12]  660 	mov	dpl,a
      00012E E9               [12]  661 	mov	a,r1
      00012F 34s00            [12]  662 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      000131 F5 83            [12]  663 	mov	dph,a
      000133 A9*06            [24]  664 	mov	r1,_UART0_printNum_sloc1_1_0
      000135 74 37            [12]  665 	mov	a,#0x37
      000137 29               [12]  666 	add	a, r1
      000138 F0               [24]  667 	movx	@dptr,a
      000139 80 16            [24]  668 	sjmp	00108$
      00013B                        669 00107$:
                                    670 ;	./src/N76_uart0.c:70: dis[max] = num % base + 48;
      00013B EB               [12]  671 	mov	a,r3
      00013C F8               [12]  672 	mov	r0,a
      00013D 33               [12]  673 	rlc	a
      00013E 95 E0            [12]  674 	subb	a,acc
      000140 F9               [12]  675 	mov	r1,a
      000141 E8               [12]  676 	mov	a,r0
      000142 24r12            [12]  677 	add	a, #_UART0_printNum_dis_10000_36
      000144 F5 82            [12]  678 	mov	dpl,a
      000146 E9               [12]  679 	mov	a,r1
      000147 34s00            [12]  680 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      000149 F5 83            [12]  681 	mov	dph,a
      00014B A9*06            [24]  682 	mov	r1,_UART0_printNum_sloc1_1_0
      00014D 74 30            [12]  683 	mov	a,#0x30
      00014F 29               [12]  684 	add	a, r1
      000150 F0               [24]  685 	movx	@dptr,a
      000151                        686 00108$:
                                    687 ;	./src/N76_uart0.c:72: num = num / base;
      000151 85*02*00         [24]  688 	mov	__divslong_PARM_2,_UART0_printNum_sloc0_1_0
      000154 85*03*01         [24]  689 	mov	(__divslong_PARM_2 + 1),(_UART0_printNum_sloc0_1_0 + 1)
      000157 85*04*02         [24]  690 	mov	(__divslong_PARM_2 + 2),(_UART0_printNum_sloc0_1_0 + 2)
      00015A 85*05*03         [24]  691 	mov	(__divslong_PARM_2 + 3),(_UART0_printNum_sloc0_1_0 + 3)
                                    692 ;	./src/N76_uart0.c:73: max++;
      00015D 8C 82            [24]  693 	mov	dpl, r4
      00015F 8D 83            [24]  694 	mov	dph, r5
      000161 8E F0            [24]  695 	mov	b, r6
      000163 EF               [12]  696 	mov	a, r7
      000164 C0 03            [24]  697 	push	ar3
      000166 C0 02            [24]  698 	push	ar2
      000168 12r00r00         [24]  699 	lcall	__divslong
      00016B AC 82            [24]  700 	mov	r4, dpl
      00016D AD 83            [24]  701 	mov	r5, dph
      00016F AE F0            [24]  702 	mov	r6, b
      000171 FF               [12]  703 	mov	r7, a
      000172 D0 02            [24]  704 	pop	ar2
      000174 D0 03            [24]  705 	pop	ar3
      000176 0B               [12]  706 	inc	r3
      000177 02r00rB4         [24]  707 	ljmp	00109$
      00017A                        708 00138$:
      00017A 8B 07            [24]  709 	mov	ar7,r3
                                    710 ;	./src/N76_uart0.c:76: if (base == HEX) // add 0x for HEX and 0B for BIN
      00017C 74 10            [12]  711 	mov	a,#0x10
      00017E B5*00 6F         [24]  712 	cjne	a,_UART0_printNum_PARM_2,00117$
                                    713 ;	./src/N76_uart0.c:78: if (max % 2 == 1)
      000181 EB               [12]  714 	mov	a,r3
      000182 FD               [12]  715 	mov	r5,a
      000183 33               [12]  716 	rlc	a
      000184 95 E0            [12]  717 	subb	a,acc
      000186 FE               [12]  718 	mov	r6,a
      000187 75*00 02         [24]  719 	mov	__modsint_PARM_2,#0x02
      00018A 75*01 00         [24]  720 	mov	(__modsint_PARM_2 + 1),#0x00
      00018D 8D 82            [24]  721 	mov	dpl, r5
      00018F 8E 83            [24]  722 	mov	dph, r6
      000191 C0 07            [24]  723 	push	ar7
      000193 C0 06            [24]  724 	push	ar6
      000195 C0 05            [24]  725 	push	ar5
      000197 C0 03            [24]  726 	push	ar3
      000199 C0 02            [24]  727 	push	ar2
      00019B 12r00r00         [24]  728 	lcall	__modsint
      00019E A9 82            [24]  729 	mov	r1, dpl
      0001A0 AC 83            [24]  730 	mov	r4, dph
      0001A2 D0 02            [24]  731 	pop	ar2
      0001A4 D0 03            [24]  732 	pop	ar3
      0001A6 D0 05            [24]  733 	pop	ar5
      0001A8 D0 06            [24]  734 	pop	ar6
      0001AA D0 07            [24]  735 	pop	ar7
      0001AC B9 01 13         [24]  736 	cjne	r1,#0x01,00113$
      0001AF BC 00 10         [24]  737 	cjne	r4,#0x00,00113$
                                    738 ;	./src/N76_uart0.c:79: dis[max++] = '0';
      0001B2 EB               [12]  739 	mov	a,r3
      0001B3 04               [12]  740 	inc	a
      0001B4 FF               [12]  741 	mov	r7,a
      0001B5 ED               [12]  742 	mov	a,r5
      0001B6 24r12            [12]  743 	add	a, #_UART0_printNum_dis_10000_36
      0001B8 F5 82            [12]  744 	mov	dpl,a
      0001BA EE               [12]  745 	mov	a,r6
      0001BB 34s00            [12]  746 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      0001BD F5 83            [12]  747 	mov	dph,a
      0001BF 74 30            [12]  748 	mov	a,#0x30
      0001C1 F0               [24]  749 	movx	@dptr,a
      0001C2                        750 00113$:
                                    751 ;	./src/N76_uart0.c:81: dis[max++] = 'x';
      0001C2 EF               [12]  752 	mov	a,r7
      0001C3 FE               [12]  753 	mov	r6,a
      0001C4 04               [12]  754 	inc	a
      0001C5 FD               [12]  755 	mov	r5,a
      0001C6 EE               [12]  756 	mov	a,r6
      0001C7 33               [12]  757 	rlc	a
      0001C8 95 E0            [12]  758 	subb	a,acc
      0001CA FC               [12]  759 	mov	r4,a
      0001CB EE               [12]  760 	mov	a,r6
      0001CC 24r12            [12]  761 	add	a, #_UART0_printNum_dis_10000_36
      0001CE F5 82            [12]  762 	mov	dpl,a
      0001D0 EC               [12]  763 	mov	a,r4
      0001D1 34s00            [12]  764 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      0001D3 F5 83            [12]  765 	mov	dph,a
      0001D5 74 78            [12]  766 	mov	a,#0x78
      0001D7 F0               [24]  767 	movx	@dptr,a
                                    768 ;	./src/N76_uart0.c:82: dis[max++] = '0';
      0001D8 ED               [12]  769 	mov	a,r5
      0001D9 FE               [12]  770 	mov	r6,a
      0001DA 04               [12]  771 	inc	a
      0001DB FF               [12]  772 	mov	r7,a
      0001DC EE               [12]  773 	mov	a,r6
      0001DD 33               [12]  774 	rlc	a
      0001DE 95 E0            [12]  775 	subb	a,acc
      0001E0 FD               [12]  776 	mov	r5,a
      0001E1 EE               [12]  777 	mov	a,r6
      0001E2 24r12            [12]  778 	add	a, #_UART0_printNum_dis_10000_36
      0001E4 F5 82            [12]  779 	mov	dpl,a
      0001E6 ED               [12]  780 	mov	a,r5
      0001E7 34s00            [12]  781 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      0001E9 F5 83            [12]  782 	mov	dph,a
      0001EB 74 30            [12]  783 	mov	a,#0x30
      0001ED F0               [24]  784 	movx	@dptr,a
      0001EE 80 2F            [24]  785 	sjmp	00118$
      0001F0                        786 00117$:
                                    787 ;	./src/N76_uart0.c:84: else if (base == BIN)
      0001F0 74 02            [12]  788 	mov	a,#0x02
      0001F2 B5*00 2A         [24]  789 	cjne	a,_UART0_printNum_PARM_2,00118$
                                    790 ;	./src/N76_uart0.c:86: dis[max++] = 'B';
      0001F5 EB               [12]  791 	mov	a,r3
      0001F6 04               [12]  792 	inc	a
      0001F7 FF               [12]  793 	mov	r7,a
      0001F8 EB               [12]  794 	mov	a,r3
      0001F9 33               [12]  795 	rlc	a
      0001FA 95 E0            [12]  796 	subb	a,acc
      0001FC FE               [12]  797 	mov	r6,a
      0001FD EB               [12]  798 	mov	a,r3
      0001FE 24r12            [12]  799 	add	a, #_UART0_printNum_dis_10000_36
      000200 F5 82            [12]  800 	mov	dpl,a
      000202 EE               [12]  801 	mov	a,r6
      000203 34s00            [12]  802 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      000205 F5 83            [12]  803 	mov	dph,a
      000207 74 42            [12]  804 	mov	a,#0x42
      000209 F0               [24]  805 	movx	@dptr,a
                                    806 ;	./src/N76_uart0.c:87: dis[max++] = '0';
      00020A 8F 06            [24]  807 	mov	ar6,r7
      00020C 0F               [12]  808 	inc	r7
      00020D EE               [12]  809 	mov	a,r6
      00020E 33               [12]  810 	rlc	a
      00020F 95 E0            [12]  811 	subb	a,acc
      000211 FD               [12]  812 	mov	r5,a
      000212 EE               [12]  813 	mov	a,r6
      000213 24r12            [12]  814 	add	a, #_UART0_printNum_dis_10000_36
      000215 F5 82            [12]  815 	mov	dpl,a
      000217 ED               [12]  816 	mov	a,r5
      000218 34s00            [12]  817 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      00021A F5 83            [12]  818 	mov	dph,a
      00021C 74 30            [12]  819 	mov	a,#0x30
      00021E F0               [24]  820 	movx	@dptr,a
      00021F                        821 00118$:
                                    822 ;	./src/N76_uart0.c:90: if (flag == 1) // add minus to negative number
      00021F BA 01 15         [24]  823 	cjne	r2,#0x01,00137$
                                    824 ;	./src/N76_uart0.c:91: dis[max++] = '-';
      000222 8F 06            [24]  825 	mov	ar6,r7
      000224 0F               [12]  826 	inc	r7
      000225 EE               [12]  827 	mov	a,r6
      000226 33               [12]  828 	rlc	a
      000227 95 E0            [12]  829 	subb	a,acc
      000229 FD               [12]  830 	mov	r5,a
      00022A EE               [12]  831 	mov	a,r6
      00022B 24r12            [12]  832 	add	a, #_UART0_printNum_dis_10000_36
      00022D F5 82            [12]  833 	mov	dpl,a
      00022F ED               [12]  834 	mov	a,r5
      000230 34s00            [12]  835 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      000232 F5 83            [12]  836 	mov	dph,a
      000234 74 2D            [12]  837 	mov	a,#0x2d
      000236 F0               [24]  838 	movx	@dptr,a
                                    839 ;	./src/N76_uart0.c:93: for (uint8_t i = 0; i < max / 2; i++) // revert dis array
      000237                        840 00137$:
      000237 EF               [12]  841 	mov	a,r7
      000238 14               [12]  842 	dec	a
      000239 F5*06            [12]  843 	mov	_UART0_printNum_sloc1_1_0,a
      00023B 75*01 00         [24]  844 	mov	_UART0_printNum_i_20000_42,#0x00
      00023E                        845 00123$:
      00023E EF               [12]  846 	mov	a,r7
      00023F FB               [12]  847 	mov	r3,a
      000240 33               [12]  848 	rlc	a
      000241 95 E0            [12]  849 	subb	a,acc
      000243 FC               [12]  850 	mov	r4,a
      000244 75*00 02         [24]  851 	mov	__divsint_PARM_2,#0x02
      000247 75*01 00         [24]  852 	mov	(__divsint_PARM_2 + 1),#0x00
      00024A 8B 82            [24]  853 	mov	dpl, r3
      00024C 8C 83            [24]  854 	mov	dph, r4
      00024E C0 07            [24]  855 	push	ar7
      000250 C0 04            [24]  856 	push	ar4
      000252 C0 03            [24]  857 	push	ar3
      000254 12r00r00         [24]  858 	lcall	__divsint
      000257 A9 82            [24]  859 	mov	r1, dpl
      000259 AA 83            [24]  860 	mov	r2, dph
      00025B D0 03            [24]  861 	pop	ar3
      00025D D0 04            [24]  862 	pop	ar4
      00025F D0 07            [24]  863 	pop	ar7
      000261 A8*01            [24]  864 	mov	r0,_UART0_printNum_i_20000_42
      000263 7D 00            [12]  865 	mov	r5,#0x00
      000265 C3               [12]  866 	clr	c
      000266 E8               [12]  867 	mov	a,r0
      000267 99               [12]  868 	subb	a,r1
      000268 ED               [12]  869 	mov	a,r5
      000269 64 80            [12]  870 	xrl	a,#0x80
      00026B 8A F0            [24]  871 	mov	b,r2
      00026D 63 F0 80         [24]  872 	xrl	b,#0x80
      000270 95 F0            [12]  873 	subb	a,b
      000272 50 51            [24]  874 	jnc	00121$
                                    875 ;	./src/N76_uart0.c:95: dis[max] = dis[i];
      000274 C0 07            [24]  876 	push	ar7
      000276 EB               [12]  877 	mov	a,r3
      000277 24r12            [12]  878 	add	a, #_UART0_printNum_dis_10000_36
      000279 FA               [12]  879 	mov	r2,a
      00027A EC               [12]  880 	mov	a,r4
      00027B 34s00            [12]  881 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      00027D FD               [12]  882 	mov	r5,a
      00027E E5*01            [12]  883 	mov	a,_UART0_printNum_i_20000_42
      000280 24r12            [12]  884 	add	a, #_UART0_printNum_dis_10000_36
      000282 F8               [12]  885 	mov	r0,a
      000283 E4               [12]  886 	clr	a
      000284 34s00            [12]  887 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      000286 F9               [12]  888 	mov	r1,a
      000287 88 82            [24]  889 	mov	dpl,r0
      000289 89 83            [24]  890 	mov	dph,r1
      00028B E0               [24]  891 	movx	a,@dptr
      00028C 8A 82            [24]  892 	mov	dpl,r2
      00028E 8D 83            [24]  893 	mov	dph,r5
      000290 F0               [24]  894 	movx	@dptr,a
                                    895 ;	./src/N76_uart0.c:96: dis[i] = dis[max - 1 - i];
      000291 AF*01            [24]  896 	mov	r7,_UART0_printNum_i_20000_42
      000293 E5*06            [12]  897 	mov	a,_UART0_printNum_sloc1_1_0
      000295 C3               [12]  898 	clr	c
      000296 9F               [12]  899 	subb	a,r7
      000297 FE               [12]  900 	mov	r6,a
      000298 33               [12]  901 	rlc	a
      000299 95 E0            [12]  902 	subb	a,acc
      00029B FF               [12]  903 	mov	r7,a
      00029C EE               [12]  904 	mov	a,r6
      00029D 24r12            [12]  905 	add	a, #_UART0_printNum_dis_10000_36
      00029F F5*02            [12]  906 	mov	_UART0_printNum_sloc0_1_0,a
      0002A1 EF               [12]  907 	mov	a,r7
      0002A2 34s00            [12]  908 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      0002A4 F5*03            [12]  909 	mov	(_UART0_printNum_sloc0_1_0 + 1),a
      0002A6 85*02 82         [24]  910 	mov	dpl,_UART0_printNum_sloc0_1_0
      0002A9 85*03 83         [24]  911 	mov	dph,(_UART0_printNum_sloc0_1_0 + 1)
      0002AC E0               [24]  912 	movx	a,@dptr
      0002AD 88 82            [24]  913 	mov	dpl,r0
      0002AF 89 83            [24]  914 	mov	dph,r1
      0002B1 F0               [24]  915 	movx	@dptr,a
                                    916 ;	./src/N76_uart0.c:97: dis[max - 1 - i] = dis[max];
      0002B2 8A 82            [24]  917 	mov	dpl,r2
      0002B4 8D 83            [24]  918 	mov	dph,r5
      0002B6 E0               [24]  919 	movx	a,@dptr
      0002B7 85*02 82         [24]  920 	mov	dpl,_UART0_printNum_sloc0_1_0
      0002BA 85*03 83         [24]  921 	mov	dph,(_UART0_printNum_sloc0_1_0 + 1)
      0002BD F0               [24]  922 	movx	@dptr,a
                                    923 ;	./src/N76_uart0.c:93: for (uint8_t i = 0; i < max / 2; i++) // revert dis array
      0002BE 05*01            [12]  924 	inc	_UART0_printNum_i_20000_42
      0002C0 D0 07            [24]  925 	pop	ar7
      0002C2 02r02r3E         [24]  926 	ljmp	00123$
      0002C5                        927 00121$:
                                    928 ;	./src/N76_uart0.c:99: dis[max] = '\0';  // end string character
      0002C5 EB               [12]  929 	mov	a,r3
      0002C6 24r12            [12]  930 	add	a, #_UART0_printNum_dis_10000_36
      0002C8 F5 82            [12]  931 	mov	dpl,a
      0002CA EC               [12]  932 	mov	a,r4
      0002CB 34s00            [12]  933 	addc	a, #(_UART0_printNum_dis_10000_36 >> 8)
      0002CD F5 83            [12]  934 	mov	dph,a
      0002CF E4               [12]  935 	clr	a
      0002D0 F0               [24]  936 	movx	@dptr,a
                                    937 ;	./src/N76_uart0.c:100: UART0_print(dis); // print dis
      0002D1 90r00r12         [24]  938 	mov	dptr,#_UART0_printNum_dis_10000_36
      0002D4 F5 F0            [12]  939 	mov	b,a
                                    940 ;	./src/N76_uart0.c:101: }
      0002D6 02r00r36         [24]  941 	ljmp	_UART0_print
                                    942 ;------------------------------------------------------------
                                    943 ;Allocation info for local variables in function 'UART0_printNumln'
                                    944 ;------------------------------------------------------------
                                    945 ;base                      Allocated with name '_UART0_printNumln_PARM_2'
                                    946 ;num                       Allocated to registers r4 r5 r6 r7 
                                    947 ;------------------------------------------------------------
                                    948 ;	./src/N76_uart0.c:103: void UART0_printNumln(long num, uint8_t base)
                                    949 ;	-----------------------------------------
                                    950 ;	 function UART0_printNumln
                                    951 ;	-----------------------------------------
      0002D9                        952 _UART0_printNumln:
      0002D9 AC 82            [24]  953 	mov	r4,dpl
      0002DB AD 83            [24]  954 	mov	r5,dph
      0002DD AE F0            [24]  955 	mov	r6,b
      0002DF FF               [12]  956 	mov	r7,a
                                    957 ;	./src/N76_uart0.c:105: UART0_printNum(num, base);
      0002E0 85*0A*00         [24]  958 	mov	_UART0_printNum_PARM_2,_UART0_printNumln_PARM_2
      0002E3 8C 82            [24]  959 	mov	dpl, r4
      0002E5 8D 83            [24]  960 	mov	dph, r5
      0002E7 8E F0            [24]  961 	mov	b, r6
      0002E9 EF               [12]  962 	mov	a, r7
      0002EA 12r00r87         [24]  963 	lcall	_UART0_printNum
                                    964 ;	./src/N76_uart0.c:106: UART0_println("");
      0002ED 90r00r03         [24]  965 	mov	dptr,#___str_1
      0002F0 75 F0 80         [24]  966 	mov	b, #0x80
                                    967 ;	./src/N76_uart0.c:107: }
      0002F3 02r00r7B         [24]  968 	ljmp	_UART0_println
                                    969 ;------------------------------------------------------------
                                    970 ;Allocation info for local variables in function 'UART0_available'
                                    971 ;------------------------------------------------------------
                                    972 ;	./src/N76_uart0.c:109: int UART0_available(void)
                                    973 ;	-----------------------------------------
                                    974 ;	 function UART0_available
                                    975 ;	-----------------------------------------
      0002F6                        976 _UART0_available:
                                    977 ;	./src/N76_uart0.c:111: return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
      0002F6 90r00r00         [24]  978 	mov	dptr,#__rx_buffer_head
      0002F9 E0               [24]  979 	movx	a,@dptr
      0002FA FF               [12]  980 	mov	r7,a
      0002FB 7E 00            [12]  981 	mov	r6,#0x00
      0002FD 74 10            [12]  982 	mov	a,#0x10
      0002FF 2F               [12]  983 	add	a, r7
      000300 FF               [12]  984 	mov	r7,a
      000301 E4               [12]  985 	clr	a
      000302 3E               [12]  986 	addc	a, r6
      000303 FE               [12]  987 	mov	r6,a
      000304 90r00r01         [24]  988 	mov	dptr,#__rx_buffer_tail
      000307 E0               [24]  989 	movx	a,@dptr
      000308 FD               [12]  990 	mov	r5,a
      000309 7C 00            [12]  991 	mov	r4,#0x00
      00030B EF               [12]  992 	mov	a,r7
      00030C C3               [12]  993 	clr	c
      00030D 9D               [12]  994 	subb	a,r5
      00030E FF               [12]  995 	mov	r7,a
      00030F EE               [12]  996 	mov	a,r6
      000310 9C               [12]  997 	subb	a,r4
      000311 74 0F            [12]  998 	mov	a,#0x0f
      000313 5F               [12]  999 	anl	a,r7
      000314 F5 82            [12] 1000 	mov	dpl,a
      000316 75 83 00         [24] 1001 	mov	dph,#0x00
                                   1002 ;	./src/N76_uart0.c:112: }
      000319 22               [24] 1003 	ret
                                   1004 ;------------------------------------------------------------
                                   1005 ;Allocation info for local variables in function 'UART0_read'
                                   1006 ;------------------------------------------------------------
                                   1007 ;c                         Allocated to registers r7 
                                   1008 ;------------------------------------------------------------
                                   1009 ;	./src/N76_uart0.c:114: int UART0_read(void)
                                   1010 ;	-----------------------------------------
                                   1011 ;	 function UART0_read
                                   1012 ;	-----------------------------------------
      00031A                       1013 _UART0_read:
                                   1014 ;	./src/N76_uart0.c:117: if (_rx_buffer_head == _rx_buffer_tail)
      00031A 90r00r00         [24] 1015 	mov	dptr,#__rx_buffer_head
      00031D E0               [24] 1016 	movx	a,@dptr
      00031E FF               [12] 1017 	mov	r7,a
      00031F 90r00r01         [24] 1018 	mov	dptr,#__rx_buffer_tail
      000322 E0               [24] 1019 	movx	a,@dptr
      000323 FE               [12] 1020 	mov	r6,a
      000324 EF               [12] 1021 	mov	a,r7
      000325 B5 06 04         [24] 1022 	cjne	a,ar6,00102$
                                   1023 ;	./src/N76_uart0.c:119: return -1;
      000328 90 FF FF         [24] 1024 	mov	dptr,#0xffff
      00032B 22               [24] 1025 	ret
      00032C                       1026 00102$:
                                   1027 ;	./src/N76_uart0.c:123: uint8_t c = _rx_buffer[_rx_buffer_tail];
      00032C EE               [12] 1028 	mov	a,r6
      00032D 24r02            [12] 1029 	add	a, #__rx_buffer
      00032F F5 82            [12] 1030 	mov	dpl,a
      000331 E4               [12] 1031 	clr	a
      000332 34s00            [12] 1032 	addc	a, #(__rx_buffer >> 8)
      000334 F5 83            [12] 1033 	mov	dph,a
      000336 E0               [24] 1034 	movx	a,@dptr
      000337 FF               [12] 1035 	mov	r7,a
                                   1036 ;	./src/N76_uart0.c:124: _rx_buffer_tail = (uint8_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
      000338 0E               [12] 1037 	inc	r6
      000339 53 06 0F         [24] 1038 	anl	ar6,#0x0f
      00033C 90r00r01         [24] 1039 	mov	dptr,#__rx_buffer_tail
      00033F EE               [12] 1040 	mov	a,r6
      000340 F0               [24] 1041 	movx	@dptr,a
                                   1042 ;	./src/N76_uart0.c:125: return c;
      000341 7E 00            [12] 1043 	mov	r6,#0x00
      000343 8F 82            [24] 1044 	mov	dpl, r7
      000345 8E 83            [24] 1045 	mov	dph, r6
                                   1046 ;	./src/N76_uart0.c:127: }
      000347 22               [24] 1047 	ret
                                   1048 ;------------------------------------------------------------
                                   1049 ;Allocation info for local variables in function 'UART0_attachInterrupt'
                                   1050 ;------------------------------------------------------------
                                   1051 ;	./src/N76_uart0.c:129: void UART0_attachInterrupt(void)
                                   1052 ;	-----------------------------------------
                                   1053 ;	 function UART0_attachInterrupt
                                   1054 ;	-----------------------------------------
      000348                       1055 _UART0_attachInterrupt:
                                   1056 ;	./src/N76_uart0.c:131: set_REN;
      000348 43 98 10         [24] 1057 	orl	_scon,#0x10
                                   1058 ;	./src/N76_uart0.c:132: set_ES; // enable UART0 interrupt
      00034B 43 A8 10         [24] 1059 	orl	_ie,#0x10
                                   1060 ;	./src/N76_uart0.c:133: }
      00034E 22               [24] 1061 	ret
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'UART0_detachInterrupt'
                                   1064 ;------------------------------------------------------------
                                   1065 ;	./src/N76_uart0.c:135: void UART0_detachInterrupt(void)
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function UART0_detachInterrupt
                                   1068 ;	-----------------------------------------
      00034F                       1069 _UART0_detachInterrupt:
                                   1070 ;	./src/N76_uart0.c:137: clr_REN;
      00034F 53 98 EF         [24] 1071 	anl	_scon,#0xef
                                   1072 ;	./src/N76_uart0.c:138: clr_ES; // disable UART0 interrupt
      000352 53 A8 EF         [24] 1073 	anl	_ie,#0xef
                                   1074 ;	./src/N76_uart0.c:139: }
      000355 22               [24] 1075 	ret
                                   1076 ;------------------------------------------------------------
                                   1077 ;Allocation info for local variables in function 'UART0_INT_FUCTION'
                                   1078 ;------------------------------------------------------------
                                   1079 ;c                         Allocated to registers r7 
                                   1080 ;i                         Allocated to registers r4 
                                   1081 ;------------------------------------------------------------
                                   1082 ;	./src/N76_uart0.c:141: ISR(UART0_INT_FUCTION, INTERRUPT_UART0)
                                   1083 ;	-----------------------------------------
                                   1084 ;	 function UART0_INT_FUCTION
                                   1085 ;	-----------------------------------------
      000356                       1086 _UART0_INT_FUCTION:
      000356 C0 E0            [24] 1087 	push	acc
      000358 C0 82            [24] 1088 	push	dpl
      00035A C0 83            [24] 1089 	push	dph
      00035C C0 07            [24] 1090 	push	ar7
      00035E C0 06            [24] 1091 	push	ar6
      000360 C0 05            [24] 1092 	push	ar5
      000362 C0 04            [24] 1093 	push	ar4
      000364 C0 D0            [24] 1094 	push	psw
      000366 75 D0 00         [24] 1095 	mov	psw,#0x00
                                   1096 ;	./src/N76_uart0.c:143: if (SCON & 0x01 != 0x00) // check if SCON, RI == 1
      000369 E5 98            [12] 1097 	mov	a,_scon
      00036B 30 E0 31         [24] 1098 	jnb	acc.0,00105$
                                   1099 ;	./src/N76_uart0.c:145: clr_RI;              /* clear reception flag for next reception */
      00036E 53 98 FE         [24] 1100 	anl	_scon,#0xfe
                                   1101 ;	./src/N76_uart0.c:147: uint8_t c = SBUF;
      000371 AF 99            [24] 1102 	mov	r7,_sbuf
                                   1103 ;	./src/N76_uart0.c:148: uint8_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
      000373 90r00r00         [24] 1104 	mov	dptr,#__rx_buffer_head
      000376 E0               [24] 1105 	movx	a,@dptr
      000377 FE               [12] 1106 	mov	r6,a
      000378 FC               [12] 1107 	mov	r4,a
      000379 7D 00            [12] 1108 	mov	r5,#0x00
      00037B 0C               [12] 1109 	inc	r4
      00037C BC 00 01         [24] 1110 	cjne	r4,#0x00,00120$
      00037F 0D               [12] 1111 	inc	r5
      000380                       1112 00120$:
      000380 53 04 0F         [24] 1113 	anl	ar4,#0x0f
                                   1114 ;	./src/N76_uart0.c:154: if (i != _rx_buffer_tail)
      000383 90r00r01         [24] 1115 	mov	dptr,#__rx_buffer_tail
      000386 E0               [24] 1116 	movx	a,@dptr
      000387 FD               [12] 1117 	mov	r5,a
      000388 EC               [12] 1118 	mov	a,r4
      000389 B5 05 02         [24] 1119 	cjne	a,ar5,00121$
      00038C 80 11            [24] 1120 	sjmp	00105$
      00038E                       1121 00121$:
                                   1122 ;	./src/N76_uart0.c:156: _rx_buffer[_rx_buffer_head] = c;
      00038E EE               [12] 1123 	mov	a,r6
      00038F 24r02            [12] 1124 	add	a, #__rx_buffer
      000391 F5 82            [12] 1125 	mov	dpl,a
      000393 E4               [12] 1126 	clr	a
      000394 34s00            [12] 1127 	addc	a, #(__rx_buffer >> 8)
      000396 F5 83            [12] 1128 	mov	dph,a
      000398 EF               [12] 1129 	mov	a,r7
      000399 F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	./src/N76_uart0.c:157: _rx_buffer_head = i;
      00039A 90r00r00         [24] 1132 	mov	dptr,#__rx_buffer_head
      00039D EC               [12] 1133 	mov	a,r4
      00039E F0               [24] 1134 	movx	@dptr,a
      00039F                       1135 00105$:
                                   1136 ;	./src/N76_uart0.c:160: }
      00039F D0 D0            [24] 1137 	pop	psw
      0003A1 D0 04            [24] 1138 	pop	ar4
      0003A3 D0 05            [24] 1139 	pop	ar5
      0003A5 D0 06            [24] 1140 	pop	ar6
      0003A7 D0 07            [24] 1141 	pop	ar7
      0003A9 D0 83            [24] 1142 	pop	dph
      0003AB D0 82            [24] 1143 	pop	dpl
      0003AD D0 E0            [24] 1144 	pop	acc
      0003AF 32               [24] 1145 	reti
                                   1146 ;	eliminated unneeded push/pop b
                                   1147 	.area CSEG    (CODE)
                                   1148 	.area CONST   (CODE)
                                   1149 	.area CONST   (CODE)
      000000                       1150 ___str_0:
      000000 0D                    1151 	.db 0x0d
      000001 0A                    1152 	.db 0x0a
      000002 00                    1153 	.db 0x00
                                   1154 	.area CSEG    (CODE)
                                   1155 	.area CONST   (CODE)
      000003                       1156 ___str_1:
      000003 00                    1157 	.db 0x00
                                   1158 	.area CSEG    (CODE)
                                   1159 	.area XINIT   (CODE)
                                   1160 	.area CABS    (ABS,CODE)
